!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/s21314689/xv6-public/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	5.9.0	//
.bss	kernel.ld	/^	.bss : {$/;"	S
.data	kernel.ld	/^	.data : {$/;"	S
.gdbinit	Makefile	/^.gdbinit: .gdbinit.tmpl$/;"	t
.rodata	kernel.ld	/^	.rodata : {$/;"	S
.stab	kernel.ld	/^	.stab : {$/;"	S
.stabstr	kernel.ld	/^	.stabstr : {$/;"	S
.text	kernel.ld	/^	.text : AT(0x100000) {$/;"	S
ALT	kbd.h	/^#define ALT /;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	/^  #define ASSERT /;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	typeref:typename:long	file:
BACK	sh.c	/^#define BACK /;"	d	file:
BACKSPACE	console.c	/^#define BACKSPACE /;"	d	file:
BBLOCK	fs.h	/^#define BBLOCK(/;"	d
BCAST	lapic.c	/^  #define BCAST /;"	d	file:
BIG	usertests.c	/^#define BIG /;"	d	file:
BPB	fs.h	/^#define BPB /;"	d
BSIZE	fs.h	/^#define BSIZE /;"	d
BUSY	lapic.c	/^  #define BUSY /;"	d	file:
B_DIRTY	buf.h	/^#define B_DIRTY /;"	d
B_VALID	buf.h	/^#define B_VALID /;"	d
C	console.c	/^#define C(/;"	d	file:
C	kbd.h	/^#define C(/;"	d
CAPSLOCK	kbd.h	/^#define CAPSLOCK /;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O2 -Wall -MD -ggdb -m32 -Werror -fn/;"	m
CMOS_PORT	lapic.c	/^#define CMOS_PORT /;"	d	file:
CMOS_RETURN	lapic.c	/^#define CMOS_RETURN /;"	d	file:
CMOS_STATA	lapic.c	/^#define CMOS_STATA /;"	d	file:
CMOS_STATB	lapic.c	/^#define CMOS_STATB /;"	d	file:
CMOS_UIP	lapic.c	/^#define CMOS_UIP /;"	d	file:
COM1	uart.c	/^#define COM1 /;"	d	file:
CONSOLE	file.h	/^#define CONSOLE /;"	d
CONV	kernel.asm	/^#define    CONV(/;"	d	file:
CONV	lapic.c	/^#define    CONV(/;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_PE	mmu.h	/^#define CR0_PE /;"	d
CR0_PG	mmu.h	/^#define CR0_PG /;"	d
CR0_WP	mmu.h	/^#define CR0_WP /;"	d
CR4_PSE	mmu.h	/^#define CR4_PSE /;"	d
CRTPORT	console.c	/^#define CRTPORT /;"	d	file:
CTL	kbd.h	/^#define CTL /;"	d
DAY	lapic.c	/^#define DAY /;"	d	file:
DEASSERT	lapic.c	/^  #define DEASSERT /;"	d	file:
DELIVS	lapic.c	/^  #define DELIVS /;"	d	file:
DEVSPACE	memlayout.h	/^#define DEVSPACE /;"	d
DIRSIZ	fs.h	/^#define DIRSIZ /;"	d
DPL_USER	mmu.h	/^#define DPL_USER /;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	/^#define E0ESC /;"	d
ELF_MAGIC	elf.h	/^#define ELF_MAGIC /;"	d
ELF_PROG_FLAG_EXEC	elf.h	/^#define ELF_PROG_FLAG_EXEC /;"	d
ELF_PROG_FLAG_READ	elf.h	/^#define ELF_PROG_FLAG_READ /;"	d
ELF_PROG_FLAG_WRITE	elf.h	/^#define ELF_PROG_FLAG_WRITE /;"	d
ELF_PROG_LOAD	elf.h	/^#define ELF_PROG_LOAD /;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	/^  #define ENABLE /;"	d	file:
EOI	lapic.c	/^#define EOI /;"	d	file:
ERROR	lapic.c	/^#define ERROR /;"	d	file:
ESR	lapic.c	/^#define ESR /;"	d	file:
EXEC	sh.c	/^#define EXEC /;"	d	file:
EXTMEM	memlayout.h	/^#define EXTMEM /;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anonfd762ebb0103
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FIXED	lapic.c	/^  #define FIXED /;"	d	file:
FL_IF	mmu.h	/^#define FL_IF /;"	d
FSSIZE	param.h	/^#define FSSIZE /;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	/^#define HOURS /;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	/^#define IBLOCK(/;"	d
ICRHI	lapic.c	/^#define ICRHI /;"	d	file:
ICRLO	lapic.c	/^#define ICRLO /;"	d	file:
ID	lapic.c	/^#define ID /;"	d	file:
IDE_BSY	ide.c	/^#define IDE_BSY /;"	d	file:
IDE_CMD_RDMUL	ide.c	/^#define IDE_CMD_RDMUL /;"	d	file:
IDE_CMD_READ	ide.c	/^#define IDE_CMD_READ /;"	d	file:
IDE_CMD_WRITE	ide.c	/^#define IDE_CMD_WRITE /;"	d	file:
IDE_CMD_WRMUL	ide.c	/^#define IDE_CMD_WRMUL /;"	d	file:
IDE_DF	ide.c	/^#define IDE_DF /;"	d	file:
IDE_DRDY	ide.c	/^#define IDE_DRDY /;"	d	file:
IDE_ERR	ide.c	/^#define IDE_ERR /;"	d	file:
INIT	lapic.c	/^  #define INIT /;"	d	file:
INPUT_BUF	console.c	/^#define INPUT_BUF /;"	d	file:
INT_ACTIVELOW	ioapic.c	/^#define INT_ACTIVELOW /;"	d	file:
INT_DISABLED	ioapic.c	/^#define INT_DISABLED /;"	d	file:
INT_LEVEL	ioapic.c	/^#define INT_LEVEL /;"	d	file:
INT_LOGICAL	ioapic.c	/^#define INT_LOGICAL /;"	d	file:
IOAPIC	ioapic.c	/^#define IOAPIC /;"	d	file:
IO_PIC1	picirq.c	/^#define IO_PIC1 /;"	d	file:
IO_PIC2	picirq.c	/^#define IO_PIC2 /;"	d	file:
IPB	fs.h	/^#define IPB /;"	d
IRQ_COM1	traps.h	/^#define IRQ_COM1 /;"	d
IRQ_ERROR	traps.h	/^#define IRQ_ERROR /;"	d
IRQ_IDE	traps.h	/^#define IRQ_IDE /;"	d
IRQ_KBD	traps.h	/^#define IRQ_KBD /;"	d
IRQ_SPURIOUS	traps.h	/^#define IRQ_SPURIOUS /;"	d
IRQ_TIMER	traps.h	/^#define IRQ_TIMER /;"	d
KBDATAP	kbd.h	/^#define KBDATAP /;"	d
KBSTATP	kbd.h	/^#define KBSTATP /;"	d
KBS_DIB	kbd.h	/^#define KBS_DIB /;"	d
KERNBASE	memlayout.h	/^#define KERNBASE /;"	d
KERNLINK	memlayout.h	/^#define KERNLINK /;"	d
KEY_DEL	kbd.h	/^#define KEY_DEL /;"	d
KEY_DN	kbd.h	/^#define KEY_DN /;"	d
KEY_END	kbd.h	/^#define KEY_END /;"	d
KEY_HOME	kbd.h	/^#define KEY_HOME /;"	d
KEY_INS	kbd.h	/^#define KEY_INS /;"	d
KEY_LF	kbd.h	/^#define KEY_LF /;"	d
KEY_PGDN	kbd.h	/^#define KEY_PGDN /;"	d
KEY_PGUP	kbd.h	/^#define KEY_PGUP /;"	d
KEY_RT	kbd.h	/^#define KEY_RT /;"	d
KEY_UP	kbd.h	/^#define KEY_UP /;"	d
KSTACKSIZE	param.h	/^#define KSTACKSIZE /;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	/^  #define LEVEL /;"	d	file:
LINT0	lapic.c	/^#define LINT0 /;"	d	file:
LINT1	lapic.c	/^#define LINT1 /;"	d	file:
LIST	sh.c	/^#define LIST /;"	d	file:
LOGSIZE	param.h	/^#define LOGSIZE /;"	d
MASKED	lapic.c	/^  #define MASKED /;"	d	file:
MAXARG	param.h	/^#define MAXARG /;"	d
MAXARGS	sh.c	/^#define MAXARGS /;"	d	file:
MAXFILE	fs.h	/^#define MAXFILE /;"	d
MAXOPBLOCKS	param.h	/^#define MAXOPBLOCKS /;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	/^#define MINS /;"	d	file:
MONTH	lapic.c	/^#define MONTH /;"	d	file:
MPBOOT	mp.h	/^    #define MPBOOT /;"	d
MPBUS	mp.h	/^#define MPBUS /;"	d
MPIOAPIC	mp.h	/^#define MPIOAPIC /;"	d
MPIOINTR	mp.h	/^#define MPIOINTR /;"	d
MPLINTR	mp.h	/^#define MPLINTR /;"	d
MPPROC	mp.h	/^#define MPPROC /;"	d
N	forktest.c	/^#define N /;"	d	file:
N	usertests.c	/^  enum { N = 20 };$/;"	e	enum:createdelete::__anonaf504e680103	file:
NBUF	param.h	/^#define NBUF /;"	d
NCPU	param.h	/^#define NCPU /;"	d
NDEV	param.h	/^#define NDEV /;"	d
NDIRECT	fs.h	/^#define NDIRECT /;"	d
NELEM	defs.h	/^#define NELEM(/;"	d
NFILE	param.h	/^#define NFILE /;"	d
NINDIRECT	fs.h	/^#define NINDIRECT /;"	d
NINODE	param.h	/^#define NINODE /;"	d
NINODES	mkfs.c	/^#define NINODES /;"	d	file:
NO	kbd.h	/^#define NO /;"	d
NOFILE	param.h	/^#define NOFILE /;"	d
NPDENTRIES	mmu.h	/^#define NPDENTRIES /;"	d
NPROC	param.h	/^#define NPROC /;"	d
NPTENTRIES	mmu.h	/^#define NPTENTRIES /;"	d
NSEGS	mmu.h	/^#define NSEGS /;"	d
NUMLOCK	kbd.h	/^#define NUMLOCK /;"	d
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	/^#define O_CREATE /;"	d
O_RDONLY	fcntl.h	/^#define O_RDONLY /;"	d
O_RDWR	fcntl.h	/^#define O_RDWR /;"	d
O_WRONLY	fcntl.h	/^#define O_WRONLY /;"	d
P2V	memlayout.h	/^#define P2V(/;"	d
P2V_WO	memlayout.h	/^#define P2V_WO(/;"	d
PCINT	lapic.c	/^#define PCINT /;"	d	file:
PDX	mmu.h	/^#define PDX(/;"	d
PDXSHIFT	mmu.h	/^#define PDXSHIFT /;"	d
PERIODIC	lapic.c	/^  #define PERIODIC /;"	d	file:
PGADDR	mmu.h	/^#define PGADDR(/;"	d
PGROUNDDOWN	mmu.h	/^#define PGROUNDDOWN(/;"	d
PGROUNDUP	mmu.h	/^#define PGROUNDUP(/;"	d
PGSIZE	mmu.h	/^#define PGSIZE /;"	d
PHYSTOP	memlayout.h	/^#define PHYSTOP /;"	d
PIPE	sh.c	/^#define PIPE /;"	d	file:
PIPESIZE	pipe.c	/^#define PIPESIZE /;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_ADDR	mmu.h	/^#define PTE_ADDR(/;"	d
PTE_FLAGS	mmu.h	/^#define PTE_FLAGS(/;"	d
PTE_P	mmu.h	/^#define PTE_P /;"	d
PTE_PS	mmu.h	/^#define PTE_PS /;"	d
PTE_U	mmu.h	/^#define PTE_U /;"	d
PTE_W	mmu.h	/^#define PTE_W /;"	d
PTX	mmu.h	/^#define PTX(/;"	d
PTXSHIFT	mmu.h	/^#define PTXSHIFT /;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=di/;"	m
REDIR	sh.c	/^#define REDIR /;"	d	file:
REG_ID	ioapic.c	/^#define REG_ID /;"	d	file:
REG_TABLE	ioapic.c	/^#define REG_TABLE /;"	d	file:
REG_VER	ioapic.c	/^#define REG_VER /;"	d	file:
ROOTDEV	param.h	/^#define ROOTDEV /;"	d
ROOTINO	fs.h	/^#define ROOTINO /;"	d
RTC_ADDR	usertests.c	/^  #define RTC_ADDR /;"	d	file:
RTC_DATA	usertests.c	/^  #define RTC_DATA /;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	/^#define SCROLLLOCK /;"	d
SECS	lapic.c	/^#define SECS /;"	d	file:
SECTOR_SIZE	ide.c	/^#define SECTOR_SIZE /;"	d	file:
SECTSIZE	bootmain.c	/^#define SECTSIZE /;"	d	file:
SEG	mmu.h	/^#define SEG(/;"	d
SEG16	mmu.h	/^#define SEG16(/;"	d
SEG_ASM	asm.h	/^#define SEG_ASM(/;"	d
SEG_KCODE	mmu.h	/^#define SEG_KCODE /;"	d
SEG_KDATA	mmu.h	/^#define SEG_KDATA /;"	d
SEG_NULLASM	asm.h	/^#define SEG_NULLASM /;"	d
SEG_TSS	mmu.h	/^#define SEG_TSS /;"	d
SEG_UCODE	mmu.h	/^#define SEG_UCODE /;"	d
SEG_UDATA	mmu.h	/^#define SEG_UDATA /;"	d
SETGATE	mmu.h	/^#define SETGATE(/;"	d
SHIFT	kbd.h	/^#define SHIFT /;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	/^  #define STARTUP /;"	d	file:
STA_R	asm.h	/^#define STA_R /;"	d
STA_R	mmu.h	/^#define STA_R /;"	d
STA_W	asm.h	/^#define STA_W /;"	d
STA_W	mmu.h	/^#define STA_W /;"	d
STA_X	asm.h	/^#define STA_X /;"	d
STA_X	mmu.h	/^#define STA_X /;"	d
STS_IG32	mmu.h	/^#define STS_IG32 /;"	d
STS_T32A	mmu.h	/^#define STS_T32A /;"	d
STS_TG32	mmu.h	/^#define STS_TG32 /;"	d
SVR	lapic.c	/^#define SVR /;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(/;"	d	file:
SYS_chdir	syscall.h	/^#define SYS_chdir /;"	d
SYS_close	syscall.h	/^#define SYS_close /;"	d
SYS_dup	syscall.h	/^#define SYS_dup /;"	d
SYS_exec	syscall.h	/^#define SYS_exec /;"	d
SYS_exit	syscall.h	/^#define SYS_exit /;"	d
SYS_fork	syscall.h	/^#define SYS_fork /;"	d
SYS_fstat	syscall.h	/^#define SYS_fstat /;"	d
SYS_getpid	syscall.h	/^#define SYS_getpid /;"	d
SYS_kill	syscall.h	/^#define SYS_kill /;"	d
SYS_link	syscall.h	/^#define SYS_link /;"	d
SYS_mkdir	syscall.h	/^#define SYS_mkdir /;"	d
SYS_mknod	syscall.h	/^#define SYS_mknod /;"	d
SYS_open	syscall.h	/^#define SYS_open /;"	d
SYS_pipe	syscall.h	/^#define SYS_pipe /;"	d
SYS_read	syscall.h	/^#define SYS_read /;"	d
SYS_sbrk	syscall.h	/^#define SYS_sbrk /;"	d
SYS_sleep	syscall.h	/^#define SYS_sleep /;"	d
SYS_unlink	syscall.h	/^#define SYS_unlink /;"	d
SYS_uptime	syscall.h	/^#define SYS_uptime /;"	d
SYS_wait	syscall.h	/^#define SYS_wait /;"	d
SYS_write	syscall.h	/^#define SYS_write /;"	d
TCCR	lapic.c	/^#define TCCR /;"	d	file:
TDCR	lapic.c	/^#define TDCR /;"	d	file:
TICR	lapic.c	/^#define TICR /;"	d	file:
TIMER	lapic.c	/^#define TIMER /;"	d	file:
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; /;"	m
TPR	lapic.c	/^#define TPR /;"	d	file:
T_ALIGN	traps.h	/^#define T_ALIGN /;"	d
T_BOUND	traps.h	/^#define T_BOUND /;"	d
T_BRKPT	traps.h	/^#define T_BRKPT /;"	d
T_DBLFLT	traps.h	/^#define T_DBLFLT /;"	d
T_DEBUG	traps.h	/^#define T_DEBUG /;"	d
T_DEFAULT	traps.h	/^#define T_DEFAULT /;"	d
T_DEV	stat.h	/^#define T_DEV /;"	d
T_DEVICE	traps.h	/^#define T_DEVICE /;"	d
T_DIR	stat.h	/^#define T_DIR /;"	d
T_DIVIDE	traps.h	/^#define T_DIVIDE /;"	d
T_FILE	stat.h	/^#define T_FILE /;"	d
T_FPERR	traps.h	/^#define T_FPERR /;"	d
T_GPFLT	traps.h	/^#define T_GPFLT /;"	d
T_ILLOP	traps.h	/^#define T_ILLOP /;"	d
T_IRQ0	traps.h	/^#define T_IRQ0 /;"	d
T_MCHK	traps.h	/^#define T_MCHK /;"	d
T_NMI	traps.h	/^#define T_NMI /;"	d
T_OFLOW	traps.h	/^#define T_OFLOW /;"	d
T_PGFLT	traps.h	/^#define T_PGFLT /;"	d
T_SEGNP	traps.h	/^#define T_SEGNP /;"	d
T_SIMDERR	traps.h	/^#define T_SIMDERR /;"	d
T_STACK	traps.h	/^#define T_STACK /;"	d
T_SYSCALL	traps.h	/^#define T_SYSCALL /;"	d
T_TSS	traps.h	/^#define T_TSS /;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	/^#define V2P(/;"	d
V2P_WO	memlayout.h	/^#define V2P_WO(/;"	d
VER	lapic.c	/^#define VER /;"	d	file:
X1	lapic.c	/^  #define X1 /;"	d	file:
YEAR	lapic.c	/^#define YEAR /;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_%	Makefile	/^_%: %.o $(ULIB)$/;"	t
__STABSTR_BEGIN__	kernel.ld	/^		PROVIDE(__STABSTR_BEGIN__ = .);$/;"	s	section:.stabstr	assignment:provide
__STABSTR_END__	kernel.ld	/^		PROVIDE(__STABSTR_END__ = .);$/;"	s	section:.stabstr	assignment:provide
__STAB_BEGIN__	kernel.ld	/^		PROVIDE(__STAB_BEGIN__ = .);$/;"	s	section:.stab	assignment:provide
__STAB_END__	kernel.ld	/^		PROVIDE(__STAB_END__ = .);$/;"	s	section:.stab	assignment:provide
__anon0f27d3d00108	bio.c	/^struct {$/;"	s	file:
__anon156e3e2a0108	proc.c	/^struct {$/;"	s	file:
__anon69d64d0c0108	kalloc.c	/^struct {$/;"	s	file:
__anon7c96edaf0108	fs.c	/^struct {$/;"	s	file:
__anon96a473a90108	console.c	/^static struct {$/;"	s	file:
__anon96a473a90208	console.c	/^struct {$/;"	s	file:
__anonaf504e680103	usertests.c	/^  enum { N = 20 };$/;"	g	function:createdelete	file:
__anonaf504e680208	usertests.c	/^  struct {$/;"	s	function:concreate	file:
__anonf5a2dce30108	umalloc.c	/^  struct {$/;"	s	union:header	file:
__anonfd762eb60108	file.c	/^struct {$/;"	s	file:
__anonfd762ebb0103	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	g	struct:file
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	Makefile	/^_forktest: forktest.o $(ULIB)$/;"	t
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	cat.asm	/^   a:	55                   	push   %ebp$/;"	l
a	echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	grep.asm	/^   a:	55                   	push   %ebp$/;"	l
a	init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;$/;"	d
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ln.asm	/^   a:	83 39 03             	cmpl   $0x3,(%ecx)$/;"	l
a	ls.asm	/^   a:	55                   	push   %ebp$/;"	l
a	mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	sh.asm	/^       a:	55                   	push   %ebp$/;"	l
a	usertests.asm	/^       a:	55                   	push   %ebp$/;"	l
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a	wc.asm	/^   a:	55                   	push   %ebp$/;"	l
a	zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	cat.asm	/^  a0:	83 ec 04             	sub    $0x4,%esp$/;"	l
a0	echo.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	ls.asm	/^  a0:	77 4a                	ja     ec <fmtname+0x8c>$/;"	l
a0	wc.asm	/^  a0:	55                   	push   %ebp$/;"	l
a0	zombie.asm	/^  a0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
a00	usertests.asm	/^     a00:	50                   	push   %eax$/;"	l
a01	sh.asm	/^     a01:	89 5e 04             	mov    %ebx,0x4(%esi)$/;"	l
a01	usertests.asm	/^     a01:	50                   	push   %eax$/;"	l
a02	ls.asm	/^ a02:	00 00 00 $/;"	l
a02	usertests.asm	/^     a02:	68 7f 40 00 00       	push   $0x407f$/;"	l
a04	sh.asm	/^     a04:	83 c4 10             	add    $0x10,%esp$/;"	l
a05	grep.asm	/^ a05:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
a05	ls.asm	/^ a05:	e9 42 ff ff ff       	jmp    94c <malloc+0x2c>$/;"	l
a07	sh.asm	/^     a07:	89 f3                	mov    %esi,%ebx$/;"	l
a07	usertests.asm	/^     a07:	ff 35 48 5e 00 00    	push   0x5e48$/;"	l
a08	grep.asm	/^ a08:	83 c0 08             	add    $0x8,%eax$/;"	l
a09	sh.asm	/^     a09:	c7 06 04 00 00 00    	movl   $0x4,(%esi)$/;"	l
a0a	ls.asm	/^ a0a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a0b	grep.asm	/^ a0b:	5b                   	pop    %ebx$/;"	l
a0c	grep.asm	/^ a0c:	5e                   	pop    %esi$/;"	l
a0d	grep.asm	/^ a0d:	5f                   	pop    %edi$/;"	l
a0d	usertests.asm	/^     a0d:	e8 1e 30 00 00       	call   3a30 <printf>$/;"	l
a0e	grep.asm	/^ a0e:	5d                   	pop    %ebp$/;"	l
a0f	grep.asm	/^ a0f:	c3                   	ret    $/;"	l
a0f	sh.asm	/^     a0f:	89 d8                	mov    %ebx,%eax$/;"	l
a1	echo.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a1	kill.asm	/^  a1:	eb 3a                	jmp    dd <strcmp+0x4d>$/;"	l
a1	ln.asm	/^  a1:	eb 3a                	jmp    dd <strcmp+0x4d>$/;"	l
a1	mkdir.asm	/^  a1:	89 c8                	mov    %ecx,%eax$/;"	l
a1	rm.asm	/^  a1:	89 c8                	mov    %ecx,%eax$/;"	l
a1	sh.asm	/^      a1:	74 77                	je     11a <main+0x11a>$/;"	l
a1	wc.asm	/^  a1:	89 e5                	mov    %esp,%ebp$/;"	l
a10	grep.asm	/^ a10:	c7 05 80 12 00 00 84 	movl   $0x1284,0x1280$/;"	l
a10	ls.asm	/^ a10:	8b 08                	mov    (%eax),%ecx$/;"	l
a11	sh.asm	/^     a11:	89 7e 08             	mov    %edi,0x8(%esi)$/;"	l
a12	ls.asm	/^ a12:	89 0a                	mov    %ecx,(%edx)$/;"	l
a12	usertests.asm	/^     a12:	e8 bc 2e 00 00       	call   38d3 <exit>$/;"	l
a14	ls.asm	/^ a14:	eb b9                	jmp    9cf <malloc+0xaf>$/;"	l
a14	sh.asm	/^     a14:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
a17	grep.asm	/^ a17:	12 00 00 $/;"	l
a17	sh.asm	/^     a17:	5b                   	pop    %ebx$/;"	l
a17	usertests.asm	/^     a17:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a18	sh.asm	/^     a18:	5e                   	pop    %esi$/;"	l
a19	sh.asm	/^     a19:	5f                   	pop    %edi$/;"	l
a1a	grep.asm	/^ a1a:	bf 84 12 00 00       	mov    $0x1284,%edi$/;"	l
a1a	sh.asm	/^     a1a:	5d                   	pop    %ebp$/;"	l
a1b	sh.asm	/^     a1b:	c3                   	ret    $/;"	l
a1c	sh.asm	/^     a1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a1e	usertests.asm	/^     a1e:	66 90                	xchg   %ax,%ax$/;"	l
a1f	grep.asm	/^ a1f:	c7 05 84 12 00 00 84 	movl   $0x1284,0x1284$/;"	l
a2	ls.asm	/^  a2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a2	stressfs.asm	/^  a2:	50                   	push   %eax$/;"	l
a20	sh.asm	/^     a20:	55                   	push   %ebp$/;"	l
a20	usertests.asm	/^     a20:	55                   	push   %ebp$/;"	l
a21	sh.asm	/^     a21:	89 e5                	mov    %esp,%ebp$/;"	l
a21	usertests.asm	/^     a21:	89 e5                	mov    %esp,%ebp$/;"	l
a23	sh.asm	/^     a23:	57                   	push   %edi$/;"	l
a23	usertests.asm	/^     a23:	57                   	push   %edi$/;"	l
a24	sh.asm	/^     a24:	56                   	push   %esi$/;"	l
a24	usertests.asm	/^     a24:	56                   	push   %esi$/;"	l
a25	sh.asm	/^     a25:	53                   	push   %ebx$/;"	l
a25	usertests.asm	/^     a25:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
a26	grep.asm	/^ a26:	12 00 00 $/;"	l
a26	sh.asm	/^     a26:	83 ec 10             	sub    $0x10,%esp$/;"	l
a28	usertests.asm	/^     a28:	53                   	push   %ebx$/;"	l
a29	grep.asm	/^ a29:	89 fa                	mov    %edi,%edx$/;"	l
a29	sh.asm	/^     a29:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
a29	usertests.asm	/^     a29:	83 ec 38             	sub    $0x38,%esp$/;"	l
a2b	grep.asm	/^ a2b:	c7 05 88 12 00 00 00 	movl   $0x0,0x1288$/;"	l
a2c	sh.asm	/^     a2c:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
a2c	usertests.asm	/^     a2c:	50                   	push   %eax$/;"	l
a2d	usertests.asm	/^     a2d:	e8 b1 2e 00 00       	call   38e3 <pipe>$/;"	l
a2f	sh.asm	/^     a2f:	68 fc 12 00 00       	push   $0x12fc$/;"	l
a3	cat.asm	/^  a3:	53                   	push   %ebx$/;"	l
a3	echo.asm	/^  a3:	53                   	push   %ebx$/;"	l
a3	forktest.asm	/^  a3:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
a3	grep.asm	/^  a3:	52                   	push   %edx$/;"	l
a3	kill.asm	/^  a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a3	ln.asm	/^  a3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a3	mkdir.asm	/^  a3:	c9                   	leave  $/;"	l
a3	rm.asm	/^  a3:	c9                   	leave  $/;"	l
a3	sh.asm	/^      a3:	3c 63                	cmp    $0x63,%al$/;"	l
a3	stressfs.asm	/^  a3:	e8 2b 03 00 00       	call   3d3 <open>$/;"	l
a3	wc.asm	/^  a3:	57                   	push   %edi$/;"	l
a32	grep.asm	/^ a32:	00 00 00 $/;"	l
a32	usertests.asm	/^     a32:	83 c4 10             	add    $0x10,%esp$/;"	l
a34	sh.asm	/^     a34:	56                   	push   %esi$/;"	l
a35	grep.asm	/^ a35:	e9 42 ff ff ff       	jmp    97c <malloc+0x2c>$/;"	l
a35	sh.asm	/^     a35:	53                   	push   %ebx$/;"	l
a35	usertests.asm	/^     a35:	85 c0                	test   %eax,%eax$/;"	l
a36	sh.asm	/^     a36:	e8 95 fb ff ff       	call   5d0 <peek>$/;"	l
a37	usertests.asm	/^     a37:	0f 85 34 01 00 00    	jne    b71 <pipe1+0x151>$/;"	l
a3a	grep.asm	/^ a3a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
a3b	sh.asm	/^     a3b:	83 c4 10             	add    $0x10,%esp$/;"	l
a3d	usertests.asm	/^     a3d:	e8 89 2e 00 00       	call   38cb <fork>$/;"	l
a3e	sh.asm	/^     a3e:	85 c0                	test   %eax,%eax$/;"	l
a4	cat.asm	/^  a4:	68 80 0b 00 00       	push   $0xb80$/;"	l
a4	echo.asm	/^  a4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a4	grep.asm	/^  a4:	52                   	push   %edx$/;"	l
a4	init.asm	/^  a4:	50                   	push   %eax$/;"	l
a4	mkdir.asm	/^  a4:	c3                   	ret    $/;"	l
a4	rm.asm	/^  a4:	c3                   	ret    $/;"	l
a4	usertests.asm	/^      a4:	e8 c7 05 00 00       	call   670 <writetest1>$/;"	l
a4	wc.asm	/^  a4:	56                   	push   %esi$/;"	l
a4	zombie.asm	/^  a4:	31 c0                	xor    %eax,%eax$/;"	l
a40	grep.asm	/^ a40:	8b 08                	mov    (%eax),%ecx$/;"	l
a40	sh.asm	/^     a40:	74 4a                	je     a8c <parseblock+0x6c>$/;"	l
a42	grep.asm	/^ a42:	89 0a                	mov    %ecx,(%edx)$/;"	l
a42	sh.asm	/^     a42:	6a 00                	push   $0x0$/;"	l
a42	usertests.asm	/^     a42:	85 c0                	test   %eax,%eax$/;"	l
a44	grep.asm	/^ a44:	eb b9                	jmp    9ff <malloc+0xaf>$/;"	l
a44	sh.asm	/^     a44:	6a 00                	push   $0x0$/;"	l
a44	usertests.asm	/^     a44:	0f 84 85 00 00 00    	je     acf <pipe1+0xaf>$/;"	l
a46	sh.asm	/^     a46:	56                   	push   %esi$/;"	l
a47	sh.asm	/^     a47:	53                   	push   %ebx$/;"	l
a48	sh.asm	/^     a48:	e8 23 fa ff ff       	call   470 <gettoken>$/;"	l
a4a	usertests.asm	/^     a4a:	0f 8e 34 01 00 00    	jle    b84 <pipe1+0x164>$/;"	l
a4d	sh.asm	/^     a4d:	58                   	pop    %eax$/;"	l
a4e	sh.asm	/^     a4e:	5a                   	pop    %edx$/;"	l
a4f	sh.asm	/^     a4f:	56                   	push   %esi$/;"	l
a5	grep.asm	/^  a5:	6a 00                	push   $0x0$/;"	l
a5	init.asm	/^  a5:	50                   	push   %eax$/;"	l
a5	ls.asm	/^  a5:	53                   	push   %ebx$/;"	l
a5	mkdir.asm	/^  a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a5	rm.asm	/^  a5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
a5	sh.asm	/^      a5:	75 a9                	jne    50 <main+0x50>$/;"	l
a5	wc.asm	/^  a5:	53                   	push   %ebx$/;"	l
a50	sh.asm	/^     a50:	53                   	push   %ebx$/;"	l
a50	usertests.asm	/^     a50:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a51	sh.asm	/^     a51:	e8 ea fe ff ff       	call   940 <parseline>$/;"	l
a53	usertests.asm	/^     a53:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
a56	sh.asm	/^     a56:	83 c4 0c             	add    $0xc,%esp$/;"	l
a56	usertests.asm	/^     a56:	31 db                	xor    %ebx,%ebx$/;"	l
a58	usertests.asm	/^     a58:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
a59	sh.asm	/^     a59:	68 38 13 00 00       	push   $0x1338$/;"	l
a5d	usertests.asm	/^     a5d:	e8 99 2e 00 00       	call   38fb <close>$/;"	l
a5e	sh.asm	/^     a5e:	89 c7                	mov    %eax,%edi$/;"	l
a6	forktest.asm	/^  a6:	75 49                	jne    f1 <forktest+0xb1>$/;"	l
a6	init.asm	/^  a6:	68 24 0b 00 00       	push   $0xb24$/;"	l
a6	ls.asm	/^  a6:	e8 25 03 00 00       	call   3d0 <strlen>$/;"	l
a6	wc.asm	/^  a6:	31 db                	xor    %ebx,%ebx$/;"	l
a6	zombie.asm	/^  a6:	29 d8                	sub    %ebx,%eax$/;"	l
a60	sh.asm	/^     a60:	56                   	push   %esi$/;"	l
a61	sh.asm	/^     a61:	53                   	push   %ebx$/;"	l
a62	sh.asm	/^     a62:	e8 69 fb ff ff       	call   5d0 <peek>$/;"	l
a62	usertests.asm	/^     a62:	c7 45 d4 00 00 00 00 	movl   $0x0,-0x2c(%ebp)$/;"	l
a67	sh.asm	/^     a67:	83 c4 10             	add    $0x10,%esp$/;"	l
a69	usertests.asm	/^     a69:	83 c4 10             	add    $0x10,%esp$/;"	l
a6a	sh.asm	/^     a6a:	85 c0                	test   %eax,%eax$/;"	l
a6c	sh.asm	/^     a6c:	74 2b                	je     a99 <parseblock+0x79>$/;"	l
a6c	usertests.asm	/^     a6c:	83 ec 04             	sub    $0x4,%esp$/;"	l
a6e	sh.asm	/^     a6e:	6a 00                	push   $0x0$/;"	l
a6f	usertests.asm	/^     a6f:	56                   	push   %esi$/;"	l
a7	echo.asm	/^  a7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
a7	grep.asm	/^  a7:	50                   	push   %eax$/;"	l
a7	kill.asm	/^  a7:	90                   	nop$/;"	l
a7	ln.asm	/^  a7:	90                   	nop$/;"	l
a7	sh.asm	/^      a7:	80 3d e1 19 00 00 64 	cmpb   $0x64,0x19e1$/;"	l
a70	sh.asm	/^     a70:	6a 00                	push   $0x0$/;"	l
a70	usertests.asm	/^     a70:	68 80 85 00 00       	push   $0x8580$/;"	l
a72	sh.asm	/^     a72:	56                   	push   %esi$/;"	l
a73	sh.asm	/^     a73:	53                   	push   %ebx$/;"	l
a74	sh.asm	/^     a74:	e8 f7 f9 ff ff       	call   470 <gettoken>$/;"	l
a75	usertests.asm	/^     a75:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
a78	usertests.asm	/^     a78:	e8 6e 2e 00 00       	call   38eb <read>$/;"	l
a79	sh.asm	/^     a79:	83 c4 0c             	add    $0xc,%esp$/;"	l
a7c	sh.asm	/^     a7c:	56                   	push   %esi$/;"	l
a7d	sh.asm	/^     a7d:	53                   	push   %ebx$/;"	l
a7d	usertests.asm	/^     a7d:	83 c4 10             	add    $0x10,%esp$/;"	l
a7e	sh.asm	/^     a7e:	57                   	push   %edi$/;"	l
a7f	sh.asm	/^     a7f:	e8 cc fb ff ff       	call   650 <parseredirs>$/;"	l
a8	forktest.asm	/^  a8:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a8	grep.asm	/^  a8:	e8 23 01 00 00       	call   1d0 <grep>$/;"	l
a8	kill.asm	/^  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax$/;"	l
a8	ln.asm	/^  a8:	0f b6 42 01          	movzbl 0x1(%edx),%eax$/;"	l
a8	stressfs.asm	/^  a8:	83 c4 10             	add    $0x10,%esp$/;"	l
a8	wc.asm	/^  a8:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
a8	zombie.asm	/^  a8:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
a80	usertests.asm	/^     a80:	89 c7                	mov    %eax,%edi$/;"	l
a82	usertests.asm	/^     a82:	85 c0                	test   %eax,%eax$/;"	l
a84	sh.asm	/^     a84:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
a84	usertests.asm	/^     a84:	0f 8e a3 00 00 00    	jle    b2d <pipe1+0x10d>$/;"	l
a87	sh.asm	/^     a87:	5b                   	pop    %ebx$/;"	l
a88	sh.asm	/^     a88:	5e                   	pop    %esi$/;"	l
a89	sh.asm	/^     a89:	5f                   	pop    %edi$/;"	l
a8a	sh.asm	/^     a8a:	5d                   	pop    %ebp$/;"	l
a8a	usertests.asm	/^     a8a:	8d 0c 1f             	lea    (%edi,%ebx,1),%ecx$/;"	l
a8b	sh.asm	/^     a8b:	c3                   	ret    $/;"	l
a8c	sh.asm	/^     a8c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a8d	usertests.asm	/^     a8d:	31 c0                	xor    %eax,%eax$/;"	l
a8f	sh.asm	/^     a8f:	68 1c 13 00 00       	push   $0x131c$/;"	l
a8f	usertests.asm	/^     a8f:	90                   	nop$/;"	l
a9	cat.asm	/^  a9:	6a 01                	push   $0x1$/;"	l
a9	usertests.asm	/^      a9:	e8 92 07 00 00       	call   840 <createtest>$/;"	l
a90	usertests.asm	/^     a90:	89 da                	mov    %ebx,%edx$/;"	l
a92	usertests.asm	/^     a92:	83 c3 01             	add    $0x1,%ebx$/;"	l
a94	sh.asm	/^     a94:	e8 d7 f6 ff ff       	call   170 <panic>$/;"	l
a95	usertests.asm	/^     a95:	38 90 80 85 00 00    	cmp    %dl,0x8580(%eax)$/;"	l
a99	sh.asm	/^     a99:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a9b	usertests.asm	/^     a9b:	75 18                	jne    ab5 <pipe1+0x95>$/;"	l
a9c	sh.asm	/^     a9c:	68 27 13 00 00       	push   $0x1327$/;"	l
a9d	usertests.asm	/^     a9d:	83 c0 01             	add    $0x1,%eax$/;"	l
aa	echo.asm	/^  aa:	0f b6 02             	movzbl (%edx),%eax$/;"	l
aa0	usertests.asm	/^     aa0:	39 d9                	cmp    %ebx,%ecx$/;"	l
aa1	sh.asm	/^     aa1:	e8 ca f6 ff ff       	call   170 <panic>$/;"	l
aa2	usertests.asm	/^     aa2:	75 ec                	jne    a90 <pipe1+0x70>$/;"	l
aa4	usertests.asm	/^     aa4:	01 f6                	add    %esi,%esi$/;"	l
aa6	sh.asm	/^     aa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
aa6	usertests.asm	/^     aa6:	b8 00 20 00 00       	mov    $0x2000,%eax$/;"	l
aab	usertests.asm	/^     aab:	01 7d d4             	add    %edi,-0x2c(%ebp)$/;"	l
aad	sh.asm	/^     aad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
aae	usertests.asm	/^     aae:	39 c6                	cmp    %eax,%esi$/;"	l
ab	cat.asm	/^  ab:	e8 d3 02 00 00       	call   383 <write>$/;"	l
ab	forktest.asm	/^  ab:	68 46 04 00 00       	push   $0x446$/;"	l
ab	init.asm	/^  ab:	68 f6 07 00 00       	push   $0x7f6$/;"	l
ab	ls.asm	/^  ab:	83 c4 0c             	add    $0xc,%esp$/;"	l
ab	stressfs.asm	/^  ab:	89 c7                	mov    %eax,%edi$/;"	l
ab	wc.asm	/^  ab:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
ab	zombie.asm	/^  ab:	c9                   	leave  $/;"	l
ab0	sh.asm	/^     ab0:	55                   	push   %ebp$/;"	l
ab0	usertests.asm	/^     ab0:	0f 4f f0             	cmovg  %eax,%esi$/;"	l
ab1	sh.asm	/^     ab1:	89 e5                	mov    %esp,%ebp$/;"	l
ab3	sh.asm	/^     ab3:	53                   	push   %ebx$/;"	l
ab3	usertests.asm	/^     ab3:	eb b7                	jmp    a6c <pipe1+0x4c>$/;"	l
ab4	sh.asm	/^     ab4:	83 ec 04             	sub    $0x4,%esp$/;"	l
ab5	usertests.asm	/^     ab5:	83 ec 08             	sub    $0x8,%esp$/;"	l
ab7	sh.asm	/^     ab7:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
ab8	usertests.asm	/^     ab8:	68 ae 40 00 00       	push   $0x40ae$/;"	l
aba	sh.asm	/^     aba:	85 db                	test   %ebx,%ebx$/;"	l
abc	sh.asm	/^     abc:	0f 84 8e 00 00 00    	je     b50 <nulterminate+0xa0>$/;"	l
abd	usertests.asm	/^     abd:	6a 01                	push   $0x1$/;"	l
abf	usertests.asm	/^     abf:	e8 6c 2f 00 00       	call   3a30 <printf>$/;"	l
ac	kill.asm	/^  ac:	83 c2 01             	add    $0x1,%edx$/;"	l
ac	ln.asm	/^  ac:	83 c2 01             	add    $0x1,%edx$/;"	l
ac	mkdir.asm	/^  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ac	rm.asm	/^  ac:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ac	zombie.asm	/^  ac:	c3                   	ret    $/;"	l
ac2	sh.asm	/^     ac2:	83 3b 05             	cmpl   $0x5,(%ebx)$/;"	l
ac4	usertests.asm	/^     ac4:	83 c4 10             	add    $0x10,%esp$/;"	l
ac5	sh.asm	/^     ac5:	77 61                	ja     b28 <nulterminate+0x78>$/;"	l
ac7	sh.asm	/^     ac7:	8b 03                	mov    (%ebx),%eax$/;"	l
ac7	usertests.asm	/^     ac7:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
ac9	sh.asm	/^     ac9:	ff 24 85 78 13 00 00 	jmp    *0x1378(,%eax,4)$/;"	l
aca	usertests.asm	/^     aca:	5b                   	pop    %ebx$/;"	l
acb	usertests.asm	/^     acb:	5e                   	pop    %esi$/;"	l
acc	usertests.asm	/^     acc:	5f                   	pop    %edi$/;"	l
acd	usertests.asm	/^     acd:	5d                   	pop    %ebp$/;"	l
ace	usertests.asm	/^     ace:	c3                   	ret    $/;"	l
acf	usertests.asm	/^     acf:	83 ec 0c             	sub    $0xc,%esp$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f	typeref:typename:void
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
ad	echo.asm	/^  ad:	84 c0                	test   %al,%al$/;"	l
ad	grep.asm	/^  ad:	e8 11 05 00 00       	call   5c3 <exit>$/;"	l
ad	stressfs.asm	/^  ad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ad	zombie.asm	/^  ad:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
ad0	sh.asm	/^     ad0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ad2	usertests.asm	/^     ad2:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
ad3	sh.asm	/^     ad3:	ff 73 04             	push   0x4(%ebx)$/;"	l
ad5	usertests.asm	/^     ad5:	31 db                	xor    %ebx,%ebx$/;"	l
ad6	sh.asm	/^     ad6:	e8 d5 ff ff ff       	call   ab0 <nulterminate>$/;"	l
ad7	usertests.asm	/^     ad7:	e8 1f 2e 00 00       	call   38fb <close>$/;"	l
adb	sh.asm	/^     adb:	58                   	pop    %eax$/;"	l
adc	sh.asm	/^     adc:	ff 73 08             	push   0x8(%ebx)$/;"	l
adc	usertests.asm	/^     adc:	83 c4 10             	add    $0x10,%esp$/;"	l
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	kernel.asm	/^  addr = myproc()->sz;$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic	typeref:typename:uint *
addrs	file.h	/^  uint addrs[NDIRECT+1];$/;"	m	struct:inode	typeref:typename:uint[]
addrs	fs.h	/^  uint addrs[NDIRECT+1];   \/\/ Data block addresses$/;"	m	struct:dinode	typeref:typename:uint[]
adf	sh.asm	/^     adf:	e8 cc ff ff ff       	call   ab0 <nulterminate>$/;"	l
adf	usertests.asm	/^     adf:	31 c0                	xor    %eax,%eax$/;"	l
ae	ls.asm	/^  ae:	50                   	push   %eax$/;"	l
ae	sh.asm	/^      ae:	75 a0                	jne    50 <main+0x50>$/;"	l
ae	usertests.asm	/^      ae:	e8 4d 02 00 00       	call   300 <openiputtest>$/;"	l
ae1	usertests.asm	/^     ae1:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ae4	sh.asm	/^     ae4:	83 c4 10             	add    $0x10,%esp$/;"	l
ae7	sh.asm	/^     ae7:	89 d8                	mov    %ebx,%eax$/;"	l
ae8	usertests.asm	/^     ae8:	8d 14 18             	lea    (%eax,%ebx,1),%edx$/;"	l
ae9	sh.asm	/^     ae9:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
aeb	usertests.asm	/^     aeb:	83 c0 01             	add    $0x1,%eax$/;"	l
aec	sh.asm	/^     aec:	c9                   	leave  $/;"	l
aed	sh.asm	/^     aed:	c3                   	ret    $/;"	l
aee	sh.asm	/^     aee:	66 90                	xchg   %ax,%ax$/;"	l
aee	usertests.asm	/^     aee:	88 90 7f 85 00 00    	mov    %dl,0x857f(%eax)$/;"	l
af	echo.asm	/^  af:	75 17                	jne    c8 <strcmp+0x28>$/;"	l
af	kill.asm	/^  af:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
af	ln.asm	/^  af:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
af	ls.asm	/^  af:	53                   	push   %ebx$/;"	l
af0	sh.asm	/^     af0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
af3	sh.asm	/^     af3:	ff 73 04             	push   0x4(%ebx)$/;"	l
af4	usertests.asm	/^     af4:	3d 09 04 00 00       	cmp    $0x409,%eax$/;"	l
af6	sh.asm	/^     af6:	e8 b5 ff ff ff       	call   ab0 <nulterminate>$/;"	l
af9	usertests.asm	/^     af9:	75 ed                	jne    ae8 <pipe1+0xc8>$/;"	l
afb	sh.asm	/^     afb:	89 d8                	mov    %ebx,%eax$/;"	l
afb	usertests.asm	/^     afb:	83 ec 04             	sub    $0x4,%esp$/;"	l
afd	sh.asm	/^     afd:	83 c4 10             	add    $0x10,%esp$/;"	l
afe	usertests.asm	/^     afe:	81 c3 09 04 00 00    	add    $0x409,%ebx$/;"	l
align	elf.h	/^  uint align;$/;"	m	struct:proghdr	typeref:typename:uint
allocproc	proc.c	/^allocproc(void)$/;"	f	typeref:struct:proc *	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	kernel.asm	/^  apicid = lapicid();$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc	typeref:typename:uchar
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu	typeref:typename:uchar
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic	typeref:typename:uchar
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	typeref:typename:int	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f	typeref:typename:int
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptest	usertests.c	/^void argptest()$/;"	f	typeref:typename:void
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f	typeref:typename:int
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc	typeref:typename:uint:5
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f	typeref:typename:int
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v	typeref:typename:char * []
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f	typeref:typename:int
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc	typeref:typename:uint:1
b	cat.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	forktest.asm	/^   b:	e8 63 03 00 00       	call   373 <exit>$/;"	l
b	grep.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ls.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	sh.asm	/^       b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^       b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	wc.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	cat.asm	/^  b0:	83 c4 10             	add    $0x10,%esp$/;"	l
b0	forktest.asm	/^  b0:	e8 fb 00 00 00       	call   1b0 <strlen>$/;"	l
b0	init.asm	/^  b0:	e8 c6 02 00 00       	call   37b <exec>$/;"	l
b0	ls.asm	/^  b0:	68 f4 0d 00 00       	push   $0xdf4$/;"	l
b0	mkdir.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	rm.asm	/^  b0:	55                   	push   %ebp$/;"	l
b0	sh.asm	/^      b0:	eb 8e                	jmp    40 <main+0x40>$/;"	l
b0	stressfs.asm	/^  b0:	83 ec 04             	sub    $0x4,%esp$/;"	l
b0	zombie.asm	/^  b0:	31 c0                	xor    %eax,%eax$/;"	l
b00	sh.asm	/^     b00:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
b03	sh.asm	/^     b03:	c9                   	leave  $/;"	l
b04	sh.asm	/^     b04:	c3                   	ret    $/;"	l
b04	usertests.asm	/^     b04:	68 09 04 00 00       	push   $0x409$/;"	l
b05	sh.asm	/^     b05:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
b08	sh.asm	/^     b08:	8b 4b 04             	mov    0x4(%ebx),%ecx$/;"	l
b09	usertests.asm	/^     b09:	68 80 85 00 00       	push   $0x8580$/;"	l
b0b	sh.asm	/^     b0b:	8d 43 08             	lea    0x8(%ebx),%eax$/;"	l
b0e	sh.asm	/^     b0e:	85 c9                	test   %ecx,%ecx$/;"	l
b0e	usertests.asm	/^     b0e:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
b1	echo.asm	/^  b1:	eb 3a                	jmp    ed <strcmp+0x4d>$/;"	l
b1	mkdir.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b1	rm.asm	/^  b1:	89 e5                	mov    %esp,%ebp$/;"	l
b10	sh.asm	/^     b10:	74 16                	je     b28 <nulterminate+0x78>$/;"	l
b11	usertests.asm	/^     b11:	e8 dd 2d 00 00       	call   38f3 <write>$/;"	l
b12	sh.asm	/^     b12:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
b16	usertests.asm	/^     b16:	83 c4 10             	add    $0x10,%esp$/;"	l
b18	sh.asm	/^     b18:	8b 50 24             	mov    0x24(%eax),%edx$/;"	l
b19	usertests.asm	/^     b19:	3d 09 04 00 00       	cmp    $0x409,%eax$/;"	l
b1b	sh.asm	/^     b1b:	83 c0 04             	add    $0x4,%eax$/;"	l
b1e	sh.asm	/^     b1e:	c6 02 00             	movb   $0x0,(%edx)$/;"	l
b1e	usertests.asm	/^     b1e:	75 77                	jne    b97 <pipe1+0x177>$/;"	l
b2	grep.asm	/^  b2:	66 90                	xchg   %ax,%ax$/;"	l
b2	kill.asm	/^  b2:	84 c0                	test   %al,%al$/;"	l
b2	ln.asm	/^  b2:	84 c0                	test   %al,%al$/;"	l
b2	sh.asm	/^      b2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b2	wc.asm	/^  b2:	c7 45 dc 00 00 00 00 	movl   $0x0,-0x24(%ebp)$/;"	l
b2	zombie.asm	/^  b2:	eb db                	jmp    8f <strcmp+0x2f>$/;"	l
b20	usertests.asm	/^     b20:	81 fb 2d 14 00 00    	cmp    $0x142d,%ebx$/;"	l
b21	sh.asm	/^     b21:	8b 50 fc             	mov    -0x4(%eax),%edx$/;"	l
b24	sh.asm	/^     b24:	85 d2                	test   %edx,%edx$/;"	l
b26	sh.asm	/^     b26:	75 f0                	jne    b18 <nulterminate+0x68>$/;"	l
b26	usertests.asm	/^     b26:	75 b7                	jne    adf <pipe1+0xbf>$/;"	l
b28	sh.asm	/^     b28:	89 d8                	mov    %ebx,%eax$/;"	l
b28	usertests.asm	/^     b28:	e8 a6 2d 00 00       	call   38d3 <exit>$/;"	l
b2a	sh.asm	/^     b2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
b2d	sh.asm	/^     b2d:	c9                   	leave  $/;"	l
b2d	usertests.asm	/^     b2d:	81 7d d4 2d 14 00 00 	cmpl   $0x142d,-0x2c(%ebp)$/;"	l
b2e	sh.asm	/^     b2e:	c3                   	ret    $/;"	l
b2f	sh.asm	/^     b2f:	90                   	nop$/;"	l
b3	cat.asm	/^  b3:	39 d8                	cmp    %ebx,%eax$/;"	l
b3	echo.asm	/^  b3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b3	mkdir.asm	/^  b3:	53                   	push   %ebx$/;"	l
b3	rm.asm	/^  b3:	53                   	push   %ebx$/;"	l
b3	stressfs.asm	/^  b3:	68 00 02 00 00       	push   $0x200$/;"	l
b3	usertests.asm	/^      b3:	e8 48 01 00 00       	call   200 <exitiputtest>$/;"	l
b30	sh.asm	/^     b30:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b33	sh.asm	/^     b33:	ff 73 04             	push   0x4(%ebx)$/;"	l
b34	usertests.asm	/^     b34:	75 26                	jne    b5c <pipe1+0x13c>$/;"	l
b36	sh.asm	/^     b36:	e8 75 ff ff ff       	call   ab0 <nulterminate>$/;"	l
b36	usertests.asm	/^     b36:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b39	usertests.asm	/^     b39:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
b3b	sh.asm	/^     b3b:	8b 43 0c             	mov    0xc(%ebx),%eax$/;"	l
b3c	usertests.asm	/^     b3c:	e8 ba 2d 00 00       	call   38fb <close>$/;"	l
b3e	sh.asm	/^     b3e:	83 c4 10             	add    $0x10,%esp$/;"	l
b4	grep.asm	/^  b4:	66 90                	xchg   %ax,%ax$/;"	l
b4	kill.asm	/^  b4:	74 1a                	je     d0 <strcmp+0x40>$/;"	l
b4	ln.asm	/^  b4:	74 1a                	je     d0 <strcmp+0x40>$/;"	l
b4	mkdir.asm	/^  b4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b4	rm.asm	/^  b4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
b4	zombie.asm	/^  b4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b41	sh.asm	/^     b41:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
b41	usertests.asm	/^     b41:	e8 95 2d 00 00       	call   38db <wait>$/;"	l
b44	sh.asm	/^     b44:	89 d8                	mov    %ebx,%eax$/;"	l
b46	sh.asm	/^     b46:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
b46	usertests.asm	/^     b46:	5a                   	pop    %edx$/;"	l
b47	usertests.asm	/^     b47:	59                   	pop    %ecx$/;"	l
b48	usertests.asm	/^     b48:	68 d3 40 00 00       	push   $0x40d3$/;"	l
b49	sh.asm	/^     b49:	c9                   	leave  $/;"	l
b4a	sh.asm	/^     b4a:	c3                   	ret    $/;"	l
b4b	sh.asm	/^     b4b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b4d	usertests.asm	/^     b4d:	6a 01                	push   $0x1$/;"	l
b4f	sh.asm	/^     b4f:	90                   	nop$/;"	l
b4f	usertests.asm	/^     b4f:	e8 dc 2e 00 00       	call   3a30 <printf>$/;"	l
b5	cat.asm	/^  b5:	75 25                	jne    dc <cat+0x4c>$/;"	l
b5	forktest.asm	/^  b5:	83 c4 0c             	add    $0xc,%esp$/;"	l
b5	init.asm	/^  b5:	5a                   	pop    %edx$/;"	l
b5	ls.asm	/^  b5:	e8 a6 04 00 00       	call   560 <memmove>$/;"	l
b5	sh.asm	/^      b5:	50                   	push   %eax$/;"	l
b50	sh.asm	/^     b50:	31 c0                	xor    %eax,%eax$/;"	l
b52	sh.asm	/^     b52:	eb 95                	jmp    ae9 <nulterminate+0x39>$/;"	l
b54	sh.asm	/^     b54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b54	usertests.asm	/^     b54:	83 c4 10             	add    $0x10,%esp$/;"	l
b57	usertests.asm	/^     b57:	e9 6b ff ff ff       	jmp    ac7 <pipe1+0xa7>$/;"	l
b5b	sh.asm	/^     b5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
b5c	usertests.asm	/^     b5c:	53                   	push   %ebx$/;"	l
b5d	usertests.asm	/^     b5d:	ff 75 d4             	push   -0x2c(%ebp)$/;"	l
b5f	sh.asm	/^     b5f:	90                   	nop$/;"	l
b6	grep.asm	/^  b6:	66 90                	xchg   %ax,%ax$/;"	l
b6	init.asm	/^  b6:	59                   	pop    %ecx$/;"	l
b6	kill.asm	/^  b6:	89 d9                	mov    %ebx,%ecx$/;"	l
b6	ln.asm	/^  b6:	89 d9                	mov    %ebx,%ecx$/;"	l
b6	sh.asm	/^      b6:	e8 90 0d 00 00       	call   e4b <close>$/;"	l
b60	sh.asm	/^     b60:	55                   	push   %ebp$/;"	l
b60	usertests.asm	/^     b60:	68 bc 40 00 00       	push   $0x40bc$/;"	l
b61	sh.asm	/^     b61:	89 e5                	mov    %esp,%ebp$/;"	l
b63	sh.asm	/^     b63:	57                   	push   %edi$/;"	l
b64	sh.asm	/^     b64:	56                   	push   %esi$/;"	l
b65	sh.asm	/^     b65:	8d 7d 08             	lea    0x8(%ebp),%edi$/;"	l
b65	usertests.asm	/^     b65:	6a 01                	push   $0x1$/;"	l
b67	usertests.asm	/^     b67:	e8 c4 2e 00 00       	call   3a30 <printf>$/;"	l
b68	sh.asm	/^     b68:	53                   	push   %ebx$/;"	l
b69	sh.asm	/^     b69:	83 ec 18             	sub    $0x18,%esp$/;"	l
b6c	sh.asm	/^     b6c:	8b 5d 08             	mov    0x8(%ebp),%ebx$/;"	l
b6c	usertests.asm	/^     b6c:	e8 62 2d 00 00       	call   38d3 <exit>$/;"	l
b6f	sh.asm	/^     b6f:	53                   	push   %ebx$/;"	l
b7	cat.asm	/^  b7:	83 ec 04             	sub    $0x4,%esp$/;"	l
b7	echo.asm	/^  b7:	90                   	nop$/;"	l
b7	init.asm	/^  b7:	68 f9 07 00 00       	push   $0x7f9$/;"	l
b7	mkdir.asm	/^  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b7	rm.asm	/^  b7:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
b70	sh.asm	/^     b70:	e8 eb 00 00 00       	call   c60 <strlen>$/;"	l
b71	usertests.asm	/^     b71:	57                   	push   %edi$/;"	l
b72	usertests.asm	/^     b72:	57                   	push   %edi$/;"	l
b73	usertests.asm	/^     b73:	68 91 40 00 00       	push   $0x4091$/;"	l
b75	sh.asm	/^     b75:	59                   	pop    %ecx$/;"	l
b76	sh.asm	/^     b76:	5e                   	pop    %esi$/;"	l
b77	sh.asm	/^     b77:	01 c3                	add    %eax,%ebx$/;"	l
b78	usertests.asm	/^     b78:	6a 01                	push   $0x1$/;"	l
b79	sh.asm	/^     b79:	53                   	push   %ebx$/;"	l
b7a	sh.asm	/^     b7a:	57                   	push   %edi$/;"	l
b7a	usertests.asm	/^     b7a:	e8 b1 2e 00 00       	call   3a30 <printf>$/;"	l
b7b	sh.asm	/^     b7b:	e8 c0 fd ff ff       	call   940 <parseline>$/;"	l
b7f	usertests.asm	/^     b7f:	e8 4f 2d 00 00       	call   38d3 <exit>$/;"	l
b8	echo.asm	/^  b8:	0f b6 42 01          	movzbl 0x1(%edx),%eax$/;"	l
b8	forktest.asm	/^  b8:	50                   	push   %eax$/;"	l
b8	grep.asm	/^  b8:	66 90                	xchg   %ax,%ax$/;"	l
b8	kill.asm	/^  b8:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
b8	ln.asm	/^  b8:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
b8	stressfs.asm	/^  b8:	56                   	push   %esi$/;"	l
b8	usertests.asm	/^      b8:	e8 63 00 00 00       	call   120 <iputtest>$/;"	l
b80	sh.asm	/^     b80:	83 c4 0c             	add    $0xc,%esp$/;"	l
b83	sh.asm	/^     b83:	68 c6 12 00 00       	push   $0x12c6$/;"	l
b84	usertests.asm	/^     b84:	50                   	push   %eax$/;"	l
b85	usertests.asm	/^     b85:	50                   	push   %eax$/;"	l
b86	usertests.asm	/^     b86:	68 dd 40 00 00       	push   $0x40dd$/;"	l
b88	sh.asm	/^     b88:	89 c6                	mov    %eax,%esi$/;"	l
b8a	sh.asm	/^     b8a:	53                   	push   %ebx$/;"	l
b8b	sh.asm	/^     b8b:	57                   	push   %edi$/;"	l
b8b	usertests.asm	/^     b8b:	6a 01                	push   $0x1$/;"	l
b8c	sh.asm	/^     b8c:	e8 3f fa ff ff       	call   5d0 <peek>$/;"	l
b8d	usertests.asm	/^     b8d:	e8 9e 2e 00 00       	call   3a30 <printf>$/;"	l
b9	forktest.asm	/^  b9:	68 46 04 00 00       	push   $0x446$/;"	l
b9	stressfs.asm	/^  b9:	57                   	push   %edi$/;"	l
b9	wc.asm	/^  b9:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)$/;"	l
b91	sh.asm	/^     b91:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b92	usertests.asm	/^     b92:	e8 3c 2d 00 00       	call   38d3 <exit>$/;"	l
b94	sh.asm	/^     b94:	83 c4 10             	add    $0x10,%esp$/;"	l
b97	sh.asm	/^     b97:	39 d8                	cmp    %ebx,%eax$/;"	l
b97	usertests.asm	/^     b97:	56                   	push   %esi$/;"	l
b98	usertests.asm	/^     b98:	56                   	push   %esi$/;"	l
b99	sh.asm	/^     b99:	75 13                	jne    bae <parsecmd+0x4e>$/;"	l
b99	usertests.asm	/^     b99:	68 a0 40 00 00       	push   $0x40a0$/;"	l
b9b	sh.asm	/^     b9b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b9e	sh.asm	/^     b9e:	56                   	push   %esi$/;"	l
b9e	usertests.asm	/^     b9e:	6a 01                	push   $0x1$/;"	l
b9f	sh.asm	/^     b9f:	e8 0c ff ff ff       	call   ab0 <nulterminate>$/;"	l
ba	cat.asm	/^  ba:	68 00 02 00 00       	push   $0x200$/;"	l
ba	grep.asm	/^  ba:	66 90                	xchg   %ax,%ax$/;"	l
ba	ls.asm	/^  ba:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
ba	mkdir.asm	/^  ba:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ba	rm.asm	/^  ba:	0f b6 02             	movzbl (%edx),%eax$/;"	l
ba	stressfs.asm	/^  ba:	e8 f4 02 00 00       	call   3b3 <write>$/;"	l
ba0	usertests.asm	/^     ba0:	e8 8b 2e 00 00       	call   3a30 <printf>$/;"	l
ba4	sh.asm	/^     ba4:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
ba5	usertests.asm	/^     ba5:	e8 29 2d 00 00       	call   38d3 <exit>$/;"	l
ba7	sh.asm	/^     ba7:	89 f0                	mov    %esi,%eax$/;"	l
ba9	sh.asm	/^     ba9:	5b                   	pop    %ebx$/;"	l
baa	sh.asm	/^     baa:	5e                   	pop    %esi$/;"	l
baa	usertests.asm	/^     baa:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
bab	sh.asm	/^     bab:	5f                   	pop    %edi$/;"	l
bac	sh.asm	/^     bac:	5d                   	pop    %ebp$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f	typeref:struct:cmd *
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	sh.asm	/^     bad:	c3                   	ret    $/;"	l
bae	sh.asm	/^     bae:	52                   	push   %edx$/;"	l
baf	sh.asm	/^     baf:	50                   	push   %eax$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	typeref:typename:uint	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f	typeref:typename:void
base	umalloc.c	/^static Header base;$/;"	v	typeref:typename:Header	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:16
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc	typeref:typename:uint:8
bb	kill.asm	/^  bb:	38 c3                	cmp    %al,%bl$/;"	l
bb	ln.asm	/^  bb:	38 c3                	cmp    %al,%bl$/;"	l
bb	sh.asm	/^      bb:	83 c4 10             	add    $0x10,%esp$/;"	l
bb	zombie.asm	/^  bb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bb0	sh.asm	/^     bb0:	68 3a 13 00 00       	push   $0x133a$/;"	l
bb0	usertests.asm	/^     bb0:	55                   	push   %ebp$/;"	l
bb1	usertests.asm	/^     bb1:	89 e5                	mov    %esp,%ebp$/;"	l
bb3	usertests.asm	/^     bb3:	57                   	push   %edi$/;"	l
bb4	usertests.asm	/^     bb4:	56                   	push   %esi$/;"	l
bb5	sh.asm	/^     bb5:	6a 02                	push   $0x2$/;"	l
bb5	usertests.asm	/^     bb5:	53                   	push   %ebx$/;"	l
bb6	usertests.asm	/^     bb6:	83 ec 24             	sub    $0x24,%esp$/;"	l
bb7	sh.asm	/^     bb7:	e8 c4 03 00 00       	call   f80 <printf>$/;"	l
bb9	usertests.asm	/^     bb9:	68 ec 40 00 00       	push   $0x40ec$/;"	l
bbc	sh.asm	/^     bbc:	c7 04 24 fe 12 00 00 	movl   $0x12fe,(%esp)$/;"	l
bbe	usertests.asm	/^     bbe:	6a 01                	push   $0x1$/;"	l
bc	echo.asm	/^  bc:	83 c2 01             	add    $0x1,%edx$/;"	l
bc	grep.asm	/^  bc:	66 90                	xchg   %ax,%ax$/;"	l
bc	init.asm	/^  bc:	6a 01                	push   $0x1$/;"	l
bc0	usertests.asm	/^     bc0:	e8 6b 2e 00 00       	call   3a30 <printf>$/;"	l
bc3	sh.asm	/^     bc3:	e8 a8 f5 ff ff       	call   170 <panic>$/;"	l
bc5	usertests.asm	/^     bc5:	e8 01 2d 00 00       	call   38cb <fork>$/;"	l
bc8	sh.asm	/^     bc8:	66 90                	xchg   %ax,%ax$/;"	l
bca	sh.asm	/^     bca:	66 90                	xchg   %ax,%ax$/;"	l
bca	usertests.asm	/^     bca:	83 c4 10             	add    $0x10,%esp$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon0f27d3d00108
bcc	sh.asm	/^     bcc:	66 90                	xchg   %ax,%ax$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	usertests.asm	/^     bcd:	85 c0                	test   %eax,%eax$/;"	l
bce	sh.asm	/^     bce:	66 90                	xchg   %ax,%ax$/;"	l
bcf	usertests.asm	/^     bcf:	75 07                	jne    bd8 <preempt+0x28>$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	kill.asm	/^  bd:	74 e9                	je     a8 <strcmp+0x18>$/;"	l
bd	ln.asm	/^  bd:	74 e9                	je     a8 <strcmp+0x18>$/;"	l
bd	ls.asm	/^  bd:	e8 0e 03 00 00       	call   3d0 <strlen>$/;"	l
bd	mkdir.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	rm.asm	/^  bd:	84 c0                	test   %al,%al$/;"	l
bd	usertests.asm	/^      bd:	e8 ce 0c 00 00       	call   d90 <mem>$/;"	l
bd0	sh.asm	/^     bd0:	55                   	push   %ebp$/;"	l
bd1	sh.asm	/^     bd1:	31 c0                	xor    %eax,%eax$/;"	l
bd1	usertests.asm	/^     bd1:	eb fe                	jmp    bd1 <preempt+0x21>$/;"	l
bd3	sh.asm	/^     bd3:	89 e5                	mov    %esp,%ebp$/;"	l
bd3	usertests.asm	/^     bd3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bd5	sh.asm	/^     bd5:	53                   	push   %ebx$/;"	l
bd6	sh.asm	/^     bd6:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
bd7	usertests.asm	/^     bd7:	90                   	nop$/;"	l
bd8	usertests.asm	/^     bd8:	89 c3                	mov    %eax,%ebx$/;"	l
bd9	sh.asm	/^     bd9:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
bda	usertests.asm	/^     bda:	e8 ec 2c 00 00       	call   38cb <fork>$/;"	l
bdc	sh.asm	/^     bdc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bdf	usertests.asm	/^     bdf:	89 c6                	mov    %eax,%esi$/;"	l
be	forktest.asm	/^  be:	6a 01                	push   $0x1$/;"	l
be	grep.asm	/^  be:	66 90                	xchg   %ax,%ax$/;"	l
be	init.asm	/^  be:	e8 dd 03 00 00       	call   4a0 <printf>$/;"	l
be	sh.asm	/^      be:	eb a7                	jmp    67 <main+0x67>$/;"	l
be0	sh.asm	/^     be0:	0f b6 14 03          	movzbl (%ebx,%eax,1),%edx$/;"	l
be1	usertests.asm	/^     be1:	85 c0                	test   %eax,%eax$/;"	l
be3	usertests.asm	/^     be3:	75 0b                	jne    bf0 <preempt+0x40>$/;"	l
be4	sh.asm	/^     be4:	88 14 01             	mov    %dl,(%ecx,%eax,1)$/;"	l
be5	usertests.asm	/^     be5:	eb fe                	jmp    be5 <preempt+0x35>$/;"	l
be7	sh.asm	/^     be7:	83 c0 01             	add    $0x1,%eax$/;"	l
be7	usertests.asm	/^     be7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bea	sh.asm	/^     bea:	84 d2                	test   %dl,%dl$/;"	l
bec	sh.asm	/^     bec:	75 f2                	jne    be0 <strcpy+0x10>$/;"	l
bee	sh.asm	/^     bee:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
bee	usertests.asm	/^     bee:	66 90                	xchg   %ax,%ax$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f	typeref:typename:void
bf	cat.asm	/^  bf:	68 80 0b 00 00       	push   $0xb80$/;"	l
bf	echo.asm	/^  bf:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
bf	kill.asm	/^  bf:	29 d8                	sub    %ebx,%eax$/;"	l
bf	ln.asm	/^  bf:	29 d8                	sub    %ebx,%eax$/;"	l
bf	mkdir.asm	/^  bf:	75 17                	jne    d8 <strcmp+0x28>$/;"	l
bf	rm.asm	/^  bf:	75 17                	jne    d8 <strcmp+0x28>$/;"	l
bf	stressfs.asm	/^  bf:	83 c4 10             	add    $0x10,%esp$/;"	l
bf	zombie.asm	/^  bf:	90                   	nop$/;"	l
bf0	usertests.asm	/^     bf0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bf1	sh.asm	/^     bf1:	89 c8                	mov    %ecx,%eax$/;"	l
bf3	sh.asm	/^     bf3:	c9                   	leave  $/;"	l
bf3	usertests.asm	/^     bf3:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
bf4	sh.asm	/^     bf4:	c3                   	ret    $/;"	l
bf5	sh.asm	/^     bf5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bf6	usertests.asm	/^     bf6:	50                   	push   %eax$/;"	l
bf7	usertests.asm	/^     bf7:	e8 e7 2c 00 00       	call   38e3 <pipe>$/;"	l
bfc	sh.asm	/^     bfc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
bfc	usertests.asm	/^     bfc:	e8 ca 2c 00 00       	call   38cb <fork>$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	typeref:typename:void	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	typeref:struct:buf *	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f	typeref:typename:void
bigdir	usertests.c	/^bigdir(void)$/;"	f	typeref:typename:void
bigfile	usertests.c	/^bigfile(void)$/;"	f	typeref:typename:void
bigwrite	usertests.c	/^bigwrite(void)$/;"	f	typeref:typename:void
binit	bio.c	/^binit(void)$/;"	f	typeref:typename:void
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	typeref:typename:int[]	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf	typeref:typename:uint
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	typeref:typename:uint	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock	typeref:typename:uint
bochs	Makefile	/^bochs : fs.img xv6.img$/;"	t
bootblock	Makefile	/^bootblock: bootasm.S bootmain.c$/;"	t
bootmain	bootmain.c	/^bootmain(void)$/;"	f	typeref:typename:void
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f	typeref:struct:buf *
brelse	bio.c	/^brelse(struct buf *b)$/;"	f	typeref:typename:void
bsstest	usertests.c	/^bsstest(void)$/;"	f	typeref:typename:void
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf[]	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon96a473a90208	typeref:typename:char[]	file:
buf	grep.c	/^char buf[1024];$/;"	v	typeref:typename:char[1024]
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v	typeref:typename:char[8192]
buf	wc.c	/^char buf[512];$/;"	v	typeref:typename:char[512]
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f	typeref:typename:void
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	typeref:typename:void	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpuid()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kernel.asm	/^  c = mycpu();$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^   c:	ff 71 fc             	push   -0x4(%ecx)$/;"	l
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	forktest.asm	/^  c0:	e8 ce 02 00 00       	call   393 <write>$/;"	l
c0	grep.asm	/^  c0:	55                   	push   %ebp$/;"	l
c0	sh.asm	/^      c0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c0	wc.asm	/^  c0:	83 ec 04             	sub    $0x4,%esp$/;"	l
c0	zombie.asm	/^  c0:	55                   	push   %ebp$/;"	l
c00	sh.asm	/^     c00:	55                   	push   %ebp$/;"	l
c01	sh.asm	/^     c01:	89 e5                	mov    %esp,%ebp$/;"	l
c01	usertests.asm	/^     c01:	83 c4 10             	add    $0x10,%esp$/;"	l
c03	sh.asm	/^     c03:	53                   	push   %ebx$/;"	l
c04	sh.asm	/^     c04:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c04	usertests.asm	/^     c04:	89 c7                	mov    %eax,%edi$/;"	l
c06	usertests.asm	/^     c06:	85 c0                	test   %eax,%eax$/;"	l
c07	sh.asm	/^     c07:	8b 4d 0c             	mov    0xc(%ebp),%ecx$/;"	l
c08	usertests.asm	/^     c08:	75 3e                	jne    c48 <preempt+0x98>$/;"	l
c0a	sh.asm	/^     c0a:	0f b6 02             	movzbl (%edx),%eax$/;"	l
c0a	usertests.asm	/^     c0a:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c0d	sh.asm	/^     c0d:	84 c0                	test   %al,%al$/;"	l
c0d	usertests.asm	/^     c0d:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
c0f	sh.asm	/^     c0f:	75 17                	jne    c28 <strcmp+0x28>$/;"	l
c1	grep.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c1	kill.asm	/^  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
c1	ln.asm	/^  c1:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
c1	mkdir.asm	/^  c1:	eb 3a                	jmp    fd <strcmp+0x4d>$/;"	l
c1	rm.asm	/^  c1:	eb 3a                	jmp    fd <strcmp+0x4d>$/;"	l
c1	zombie.asm	/^  c1:	89 e5                	mov    %esp,%ebp$/;"	l
c10	usertests.asm	/^     c10:	e8 e6 2c 00 00       	call   38fb <close>$/;"	l
c11	sh.asm	/^     c11:	eb 3a                	jmp    c4d <strcmp+0x4d>$/;"	l
c13	sh.asm	/^     c13:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c15	usertests.asm	/^     c15:	83 c4 0c             	add    $0xc,%esp$/;"	l
c17	sh.asm	/^     c17:	90                   	nop$/;"	l
c18	sh.asm	/^     c18:	0f b6 42 01          	movzbl 0x1(%edx),%eax$/;"	l
c18	usertests.asm	/^     c18:	6a 01                	push   $0x1$/;"	l
c1a	usertests.asm	/^     c1a:	68 b1 46 00 00       	push   $0x46b1$/;"	l
c1c	sh.asm	/^     c1c:	83 c2 01             	add    $0x1,%edx$/;"	l
c1f	sh.asm	/^     c1f:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
c1f	usertests.asm	/^     c1f:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
c2	echo.asm	/^  c2:	84 c0                	test   %al,%al$/;"	l
c2	ls.asm	/^  c2:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
c2	stressfs.asm	/^  c2:	83 eb 01             	sub    $0x1,%ebx$/;"	l
c2	usertests.asm	/^      c2:	e8 59 09 00 00       	call   a20 <pipe1>$/;"	l
c22	sh.asm	/^     c22:	84 c0                	test   %al,%al$/;"	l
c22	usertests.asm	/^     c22:	e8 cc 2c 00 00       	call   38f3 <write>$/;"	l
c24	sh.asm	/^     c24:	74 1a                	je     c40 <strcmp+0x40>$/;"	l
c26	sh.asm	/^     c26:	89 d9                	mov    %ebx,%ecx$/;"	l
c27	usertests.asm	/^     c27:	83 c4 10             	add    $0x10,%esp$/;"	l
c28	sh.asm	/^     c28:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c2a	usertests.asm	/^     c2a:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c2b	sh.asm	/^     c2b:	38 c3                	cmp    %al,%bl$/;"	l
c2d	sh.asm	/^     c2d:	74 e9                	je     c18 <strcmp+0x18>$/;"	l
c2d	usertests.asm	/^     c2d:	0f 85 b8 00 00 00    	jne    ceb <preempt+0x13b>$/;"	l
c2f	sh.asm	/^     c2f:	29 d8                	sub    %ebx,%eax$/;"	l
c3	grep.asm	/^  c3:	57                   	push   %edi$/;"	l
c3	init.asm	/^  c3:	e8 7b 02 00 00       	call   343 <exit>$/;"	l
c3	mkdir.asm	/^  c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c3	rm.asm	/^  c3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c3	sh.asm	/^      c3:	68 e0 19 00 00       	push   $0x19e0$/;"	l
c3	wc.asm	/^  c3:	68 00 02 00 00       	push   $0x200$/;"	l
c3	zombie.asm	/^  c3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c31	sh.asm	/^     c31:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
c33	usertests.asm	/^     c33:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c34	sh.asm	/^     c34:	c9                   	leave  $/;"	l
c35	sh.asm	/^     c35:	c3                   	ret    $/;"	l
c36	sh.asm	/^     c36:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c36	usertests.asm	/^     c36:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
c39	usertests.asm	/^     c39:	e8 bd 2c 00 00       	call   38fb <close>$/;"	l
c3d	sh.asm	/^     c3d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
c3e	usertests.asm	/^     c3e:	83 c4 10             	add    $0x10,%esp$/;"	l
c4	cat.asm	/^  c4:	56                   	push   %esi$/;"	l
c4	echo.asm	/^  c4:	74 1a                	je     e0 <strcmp+0x40>$/;"	l
c4	grep.asm	/^  c4:	56                   	push   %esi$/;"	l
c4	kill.asm	/^  c4:	c9                   	leave  $/;"	l
c4	ln.asm	/^  c4:	c9                   	leave  $/;"	l
c40	sh.asm	/^     c40:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
c41	usertests.asm	/^     c41:	eb fe                	jmp    c41 <preempt+0x91>$/;"	l
c43	usertests.asm	/^     c43:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c44	sh.asm	/^     c44:	31 c0                	xor    %eax,%eax$/;"	l
c46	sh.asm	/^     c46:	29 d8                	sub    %ebx,%eax$/;"	l
c47	usertests.asm	/^     c47:	90                   	nop$/;"	l
c48	sh.asm	/^     c48:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
c48	usertests.asm	/^     c48:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c4b	sh.asm	/^     c4b:	c9                   	leave  $/;"	l
c4b	usertests.asm	/^     c4b:	ff 75 e4             	push   -0x1c(%ebp)$/;"	l
c4c	sh.asm	/^     c4c:	c3                   	ret    $/;"	l
c4d	sh.asm	/^     c4d:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c4e	usertests.asm	/^     c4e:	e8 a8 2c 00 00       	call   38fb <close>$/;"	l
c5	cat.asm	/^  c5:	e8 b1 02 00 00       	call   37b <read>$/;"	l
c5	forktest.asm	/^  c5:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
c5	grep.asm	/^  c5:	53                   	push   %ebx$/;"	l
c5	kill.asm	/^  c5:	c3                   	ret    $/;"	l
c5	ln.asm	/^  c5:	c3                   	ret    $/;"	l
c5	ls.asm	/^  c5:	bb f4 0d 00 00       	mov    $0xdf4,%ebx$/;"	l
c5	stressfs.asm	/^  c5:	75 e9                	jne    b0 <main+0xb0>$/;"	l
c50	sh.asm	/^     c50:	31 c0                	xor    %eax,%eax$/;"	l
c52	sh.asm	/^     c52:	eb db                	jmp    c2f <strcmp+0x2f>$/;"	l
c53	usertests.asm	/^     c53:	83 c4 0c             	add    $0xc,%esp$/;"	l
c54	sh.asm	/^     c54:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c56	usertests.asm	/^     c56:	68 00 20 00 00       	push   $0x2000$/;"	l
c5b	sh.asm	/^     c5b:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c5b	usertests.asm	/^     c5b:	68 80 85 00 00       	push   $0x8580$/;"	l
c5f	sh.asm	/^     c5f:	90                   	nop$/;"	l
c6	echo.asm	/^  c6:	89 d9                	mov    %ebx,%ecx$/;"	l
c6	grep.asm	/^  c6:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c6	kill.asm	/^  c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c6	ln.asm	/^  c6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c6	zombie.asm	/^  c6:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
c60	sh.asm	/^     c60:	55                   	push   %ebp$/;"	l
c60	usertests.asm	/^     c60:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
c61	sh.asm	/^     c61:	89 e5                	mov    %esp,%ebp$/;"	l
c63	sh.asm	/^     c63:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c63	usertests.asm	/^     c63:	e8 83 2c 00 00       	call   38eb <read>$/;"	l
c66	sh.asm	/^     c66:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
c68	usertests.asm	/^     c68:	83 c4 10             	add    $0x10,%esp$/;"	l
c69	sh.asm	/^     c69:	74 15                	je     c80 <strlen+0x20>$/;"	l
c6b	sh.asm	/^     c6b:	31 c0                	xor    %eax,%eax$/;"	l
c6b	usertests.asm	/^     c6b:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c6d	sh.asm	/^     c6d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
c6e	usertests.asm	/^     c6e:	75 67                	jne    cd7 <preempt+0x127>$/;"	l
c7	mkdir.asm	/^  c7:	90                   	nop$/;"	l
c7	rm.asm	/^  c7:	90                   	nop$/;"	l
c7	stressfs.asm	/^  c7:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c7	usertests.asm	/^      c7:	e8 e4 0a 00 00       	call   bb0 <preempt>$/;"	l
c70	sh.asm	/^     c70:	83 c0 01             	add    $0x1,%eax$/;"	l
c70	usertests.asm	/^     c70:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c73	sh.asm	/^     c73:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)$/;"	l
c73	usertests.asm	/^     c73:	ff 75 e0             	push   -0x20(%ebp)$/;"	l
c76	usertests.asm	/^     c76:	e8 80 2c 00 00       	call   38fb <close>$/;"	l
c77	sh.asm	/^     c77:	89 c1                	mov    %eax,%ecx$/;"	l
c79	sh.asm	/^     c79:	75 f5                	jne    c70 <strlen+0x10>$/;"	l
c7b	sh.asm	/^     c7b:	89 c8                	mov    %ecx,%eax$/;"	l
c7b	usertests.asm	/^     c7b:	58                   	pop    %eax$/;"	l
c7c	usertests.asm	/^     c7c:	5a                   	pop    %edx$/;"	l
c7d	sh.asm	/^     c7d:	5d                   	pop    %ebp$/;"	l
c7d	usertests.asm	/^     c7d:	68 1d 41 00 00       	push   $0x411d$/;"	l
c7e	sh.asm	/^     c7e:	c3                   	ret    $/;"	l
c7f	sh.asm	/^     c7f:	90                   	nop$/;"	l
c8	echo.asm	/^  c8:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
c8	forktest.asm	/^  c8:	c9                   	leave  $/;"	l
c8	init.asm	/^  c8:	50                   	push   %eax$/;"	l
c8	mkdir.asm	/^  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax$/;"	l
c8	rm.asm	/^  c8:	0f b6 42 01          	movzbl 0x1(%edx),%eax$/;"	l
c8	sh.asm	/^      c8:	e8 93 0a 00 00       	call   b60 <parsecmd>$/;"	l
c8	wc.asm	/^  c8:	68 e0 0b 00 00       	push   $0xbe0$/;"	l
c80	sh.asm	/^     c80:	31 c9                	xor    %ecx,%ecx$/;"	l
c82	sh.asm	/^     c82:	5d                   	pop    %ebp$/;"	l
c82	usertests.asm	/^     c82:	6a 01                	push   $0x1$/;"	l
c83	sh.asm	/^     c83:	89 c8                	mov    %ecx,%eax$/;"	l
c84	usertests.asm	/^     c84:	e8 a7 2d 00 00       	call   3a30 <printf>$/;"	l
c85	sh.asm	/^     c85:	c3                   	ret    $/;"	l
c86	sh.asm	/^     c86:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
c89	usertests.asm	/^     c89:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
c8c	usertests.asm	/^     c8c:	e8 72 2c 00 00       	call   3903 <kill>$/;"	l
c8d	sh.asm	/^     c8d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
c9	forktest.asm	/^  c9:	c3                   	ret    $/;"	l
c9	grep.asm	/^  c9:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
c9	init.asm	/^  c9:	6a 01                	push   $0x1$/;"	l
c9	zombie.asm	/^  c9:	74 15                	je     e0 <strlen+0x20>$/;"	l
c90	sh.asm	/^     c90:	55                   	push   %ebp$/;"	l
c91	sh.asm	/^     c91:	89 e5                	mov    %esp,%ebp$/;"	l
c91	usertests.asm	/^     c91:	89 34 24             	mov    %esi,(%esp)$/;"	l
c93	sh.asm	/^     c93:	57                   	push   %edi$/;"	l
c94	sh.asm	/^     c94:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
c94	usertests.asm	/^     c94:	e8 6a 2c 00 00       	call   3903 <kill>$/;"	l
c97	sh.asm	/^     c97:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
c99	usertests.asm	/^     c99:	89 3c 24             	mov    %edi,(%esp)$/;"	l
c9a	sh.asm	/^     c9a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c9c	usertests.asm	/^     c9c:	e8 62 2c 00 00       	call   3903 <kill>$/;"	l
c9d	sh.asm	/^     c9d:	89 d7                	mov    %edx,%edi$/;"	l
c9f	sh.asm	/^     c9f:	fc                   	cld    $/;"	l
ca	cat.asm	/^  ca:	83 c4 10             	add    $0x10,%esp$/;"	l
ca	forktest.asm	/^  ca:	e8 a4 02 00 00       	call   373 <exit>$/;"	l
ca	ls.asm	/^  ca:	89 c6                	mov    %eax,%esi$/;"	l
ca	stressfs.asm	/^  ca:	57                   	push   %edi$/;"	l
ca0	sh.asm	/^     ca0:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
ca1	usertests.asm	/^     ca1:	59                   	pop    %ecx$/;"	l
ca2	sh.asm	/^     ca2:	8b 7d fc             	mov    -0x4(%ebp),%edi$/;"	l
ca2	usertests.asm	/^     ca2:	5b                   	pop    %ebx$/;"	l
ca3	usertests.asm	/^     ca3:	68 26 41 00 00       	push   $0x4126$/;"	l
ca5	sh.asm	/^     ca5:	89 d0                	mov    %edx,%eax$/;"	l
ca7	sh.asm	/^     ca7:	c9                   	leave  $/;"	l
ca8	sh.asm	/^     ca8:	c3                   	ret    $/;"	l
ca8	usertests.asm	/^     ca8:	6a 01                	push   $0x1$/;"	l
ca9	sh.asm	/^     ca9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
caa	usertests.asm	/^     caa:	e8 81 2d 00 00       	call   3a30 <printf>$/;"	l
caf	usertests.asm	/^     caf:	e8 27 2c 00 00       	call   38db <wait>$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f	typeref:typename:void
cb	echo.asm	/^  cb:	38 c3                	cmp    %al,%bl$/;"	l
cb	init.asm	/^  cb:	6a 01                	push   $0x1$/;"	l
cb	stressfs.asm	/^  cb:	e8 eb 02 00 00       	call   3bb <close>$/;"	l
cb	zombie.asm	/^  cb:	31 c0                	xor    %eax,%eax$/;"	l
cb0	sh.asm	/^     cb0:	55                   	push   %ebp$/;"	l
cb1	sh.asm	/^     cb1:	89 e5                	mov    %esp,%ebp$/;"	l
cb3	sh.asm	/^     cb3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cb4	usertests.asm	/^     cb4:	e8 22 2c 00 00       	call   38db <wait>$/;"	l
cb6	sh.asm	/^     cb6:	0f b6 4d 0c          	movzbl 0xc(%ebp),%ecx$/;"	l
cb9	usertests.asm	/^     cb9:	e8 1d 2c 00 00       	call   38db <wait>$/;"	l
cba	sh.asm	/^     cba:	0f b6 10             	movzbl (%eax),%edx$/;"	l
cbd	sh.asm	/^     cbd:	84 d2                	test   %dl,%dl$/;"	l
cbe	usertests.asm	/^     cbe:	5e                   	pop    %esi$/;"	l
cbf	sh.asm	/^     cbf:	75 12                	jne    cd3 <strchr+0x23>$/;"	l
cbf	usertests.asm	/^     cbf:	5f                   	pop    %edi$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	grep.asm	/^  cc:	8b 7d 0c             	mov    0xc(%ebp),%edi$/;"	l
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^  cc:	e8 ff 02 00 00       	call   3d0 <strlen>$/;"	l
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^  cc:	83 c2 01             	add    $0x1,%edx$/;"	l
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^  cc:	83 c2 01             	add    $0x1,%edx$/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^      cc:	e8 3f 0c 00 00       	call   d10 <exitwait>$/;"	l
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	usertests.asm	/^     cc0:	68 2f 41 00 00       	push   $0x412f$/;"	l
cc1	sh.asm	/^     cc1:	eb 1d                	jmp    ce0 <strchr+0x30>$/;"	l
cc3	sh.asm	/^     cc3:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
cc5	usertests.asm	/^     cc5:	6a 01                	push   $0x1$/;"	l
cc7	sh.asm	/^     cc7:	90                   	nop$/;"	l
cc7	usertests.asm	/^     cc7:	e8 64 2d 00 00       	call   3a30 <printf>$/;"	l
cc8	sh.asm	/^     cc8:	0f b6 50 01          	movzbl 0x1(%eax),%edx$/;"	l
ccc	sh.asm	/^     ccc:	83 c0 01             	add    $0x1,%eax$/;"	l
ccc	usertests.asm	/^     ccc:	83 c4 10             	add    $0x10,%esp$/;"	l
ccf	sh.asm	/^     ccf:	84 d2                	test   %dl,%dl$/;"	l
ccf	usertests.asm	/^     ccf:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
cd	cat.asm	/^  cd:	89 c3                	mov    %eax,%ebx$/;"	l
cd	echo.asm	/^  cd:	74 e9                	je     b8 <strcmp+0x18>$/;"	l
cd	init.asm	/^  cd:	68 c8 07 00 00       	push   $0x7c8$/;"	l
cd	kill.asm	/^  cd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cd	ln.asm	/^  cd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cd	sh.asm	/^      cd:	89 04 24             	mov    %eax,(%esp)$/;"	l
cd	wc.asm	/^  cd:	ff 75 08             	push   0x8(%ebp)$/;"	l
cd	zombie.asm	/^  cd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
cd1	sh.asm	/^     cd1:	74 0d                	je     ce0 <strchr+0x30>$/;"	l
cd2	usertests.asm	/^     cd2:	5b                   	pop    %ebx$/;"	l
cd3	sh.asm	/^     cd3:	38 d1                	cmp    %dl,%cl$/;"	l
cd3	usertests.asm	/^     cd3:	5e                   	pop    %esi$/;"	l
cd4	usertests.asm	/^     cd4:	5f                   	pop    %edi$/;"	l
cd5	sh.asm	/^     cd5:	75 f1                	jne    cc8 <strchr+0x18>$/;"	l
cd5	usertests.asm	/^     cd5:	5d                   	pop    %ebp$/;"	l
cd6	usertests.asm	/^     cd6:	c3                   	ret    $/;"	l
cd7	sh.asm	/^     cd7:	5d                   	pop    %ebp$/;"	l
cd7	usertests.asm	/^     cd7:	83 ec 08             	sub    $0x8,%esp$/;"	l
cd8	sh.asm	/^     cd8:	c3                   	ret    $/;"	l
cd9	sh.asm	/^     cd9:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
cda	usertests.asm	/^     cda:	68 0a 41 00 00       	push   $0x410a$/;"	l
cdf	usertests.asm	/^     cdf:	6a 01                	push   $0x1$/;"	l
ce0	sh.asm	/^     ce0:	31 c0                	xor    %eax,%eax$/;"	l
ce1	usertests.asm	/^     ce1:	e8 4a 2d 00 00       	call   3a30 <printf>$/;"	l
ce2	sh.asm	/^     ce2:	5d                   	pop    %ebp$/;"	l
ce3	sh.asm	/^     ce3:	c3                   	ret    $/;"	l
ce4	sh.asm	/^     ce4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ce6	usertests.asm	/^     ce6:	83 c4 10             	add    $0x10,%esp$/;"	l
ce9	usertests.asm	/^     ce9:	eb e4                	jmp    ccf <preempt+0x11f>$/;"	l
ceb	sh.asm	/^     ceb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ceb	usertests.asm	/^     ceb:	83 ec 08             	sub    $0x8,%esp$/;"	l
cee	usertests.asm	/^     cee:	68 f6 40 00 00       	push   $0x40f6$/;"	l
cef	sh.asm	/^     cef:	90                   	nop$/;"	l
cf	cat.asm	/^  cf:	85 c0                	test   %eax,%eax$/;"	l
cf	echo.asm	/^  cf:	29 d8                	sub    %ebx,%eax$/;"	l
cf	forktest.asm	/^  cf:	83 ec 0c             	sub    $0xc,%esp$/;"	l
cf	grep.asm	/^  cf:	0f b6 06             	movzbl (%esi),%eax$/;"	l
cf	mkdir.asm	/^  cf:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
cf	rm.asm	/^  cf:	8d 59 01             	lea    0x1(%ecx),%ebx$/;"	l
cf0	sh.asm	/^     cf0:	55                   	push   %ebp$/;"	l
cf1	sh.asm	/^     cf1:	89 e5                	mov    %esp,%ebp$/;"	l
cf3	sh.asm	/^     cf3:	57                   	push   %edi$/;"	l
cf3	usertests.asm	/^     cf3:	6a 01                	push   $0x1$/;"	l
cf4	sh.asm	/^     cf4:	56                   	push   %esi$/;"	l
cf5	sh.asm	/^     cf5:	8d 7d e7             	lea    -0x19(%ebp),%edi$/;"	l
cf5	usertests.asm	/^     cf5:	e8 36 2d 00 00       	call   3a30 <printf>$/;"	l
cf8	sh.asm	/^     cf8:	53                   	push   %ebx$/;"	l
cf9	sh.asm	/^     cf9:	31 db                	xor    %ebx,%ebx$/;"	l
cfa	usertests.asm	/^     cfa:	83 c4 10             	add    $0x10,%esp$/;"	l
cfb	sh.asm	/^     cfb:	83 ec 1c             	sub    $0x1c,%esp$/;"	l
cfd	usertests.asm	/^     cfd:	e9 31 ff ff ff       	jmp    c33 <preempt+0x83>$/;"	l
cfe	sh.asm	/^     cfe:	eb 27                	jmp    d27 <gets+0x37>$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	typeref:typename:void	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc	typeref:typename:void *
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp	typeref:typename:uchar
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf	typeref:typename:uchar
clean	Makefile	/^clean: $/;"	t
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:void
cli	x86.h	/^cli(void)$/;"	f	typeref:typename:void
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:cmd *	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:cmd *	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^cmos_read(uint reg)$/;"	f	typeref:typename:uint	file:
cmostime	lapic.c	/^cmostime(struct rtcdate *r)$/;"	f	typeref:typename:void
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	typeref:typename:void	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	typeref:typename:int	file:
concreate	usertests.c	/^concreate(void)$/;"	f	typeref:typename:void
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon96a473a90108
consoleinit	console.c	/^consoleinit(void)$/;"	f	typeref:typename:void
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f	typeref:typename:void
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f	typeref:typename:int
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f	typeref:typename:int
consputc	console.c	/^consputc(int c)$/;"	f	typeref:typename:void
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:context *
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f	typeref:typename:int
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f	typeref:typename:pde_t *
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f	typeref:typename:void
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:cpu *
cpuid	proc.c	/^cpuid() {$/;"	f	typeref:typename:int
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu[]
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate	typeref:typename:void *
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	typeref:struct:inode *	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f	typeref:typename:void
createtest	usertests.c	/^createtest(void)$/;"	f	typeref:typename:void
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	typeref:typename:ushort *	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc	typeref:typename:uint:16
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate	typeref:typename:ushort
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe	typeref:typename:ushort
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v	typeref:typename:uchar[256]
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:inode *
d	cat.asm	/^   d:	57                   	push   %edi$/;"	l
d	echo.asm	/^   d:	57                   	push   %edi$/;"	l
d	grep.asm	/^   d:	57                   	push   %edi$/;"	l
d	init.asm	/^   d:	53                   	push   %ebx$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	57                   	push   %edi$/;"	l
d	ln.asm	/^   d:	55                   	push   %ebp$/;"	l
d	ls.asm	/^   d:	57                   	push   %edi$/;"	l
d	mkdir.asm	/^   d:	57                   	push   %edi$/;"	l
d	rm.asm	/^   d:	57                   	push   %edi$/;"	l
d	sh.asm	/^       d:	51                   	push   %ecx$/;"	l
d	usertests.asm	/^       d:	51                   	push   %ecx$/;"	l
d	wc.asm	/^   d:	57                   	push   %edi$/;"	l
d	zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	kill.asm	/^  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
d0	ln.asm	/^  d0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
d0	sh.asm	/^      d0:	e8 db 00 00 00       	call   1b0 <runcmd>$/;"	l
d0	stressfs.asm	/^  d0:	58                   	pop    %eax$/;"	l
d0	wc.asm	/^  d0:	e8 16 03 00 00       	call   3eb <read>$/;"	l
d0	zombie.asm	/^  d0:	83 c0 01             	add    $0x1,%eax$/;"	l
d00	sh.asm	/^     d00:	83 ec 04             	sub    $0x4,%esp$/;"	l
d02	usertests.asm	/^     d02:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d03	sh.asm	/^     d03:	6a 01                	push   $0x1$/;"	l
d05	sh.asm	/^     d05:	57                   	push   %edi$/;"	l
d06	sh.asm	/^     d06:	6a 00                	push   $0x0$/;"	l
d08	sh.asm	/^     d08:	e8 2e 01 00 00       	call   e3b <read>$/;"	l
d09	usertests.asm	/^     d09:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d0d	sh.asm	/^     d0d:	83 c4 10             	add    $0x10,%esp$/;"	l
d1	cat.asm	/^  d1:	7f cd                	jg     a0 <cat+0x10>$/;"	l
d1	echo.asm	/^  d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
d1	ls.asm	/^  d1:	ba 0e 00 00 00       	mov    $0xe,%edx$/;"	l
d1	stressfs.asm	/^  d1:	5a                   	pop    %edx$/;"	l
d1	usertests.asm	/^      d1:	e8 1a 27 00 00       	call   27f0 <rmdot>$/;"	l
d10	sh.asm	/^     d10:	85 c0                	test   %eax,%eax$/;"	l
d10	usertests.asm	/^     d10:	55                   	push   %ebp$/;"	l
d11	usertests.asm	/^     d11:	89 e5                	mov    %esp,%ebp$/;"	l
d12	sh.asm	/^     d12:	7e 1d                	jle    d31 <gets+0x41>$/;"	l
d13	usertests.asm	/^     d13:	56                   	push   %esi$/;"	l
d14	sh.asm	/^     d14:	0f b6 45 e7          	movzbl -0x19(%ebp),%eax$/;"	l
d14	usertests.asm	/^     d14:	be 64 00 00 00       	mov    $0x64,%esi$/;"	l
d18	sh.asm	/^     d18:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
d19	usertests.asm	/^     d19:	53                   	push   %ebx$/;"	l
d1a	usertests.asm	/^     d1a:	eb 14                	jmp    d30 <exitwait+0x20>$/;"	l
d1b	sh.asm	/^     d1b:	88 44 1a ff          	mov    %al,-0x1(%edx,%ebx,1)$/;"	l
d1c	usertests.asm	/^     d1c:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d1f	sh.asm	/^     d1f:	3c 0a                	cmp    $0xa,%al$/;"	l
d2	forktest.asm	/^  d2:	68 1f 04 00 00       	push   $0x41f$/;"	l
d2	grep.asm	/^  d2:	84 c0                	test   %al,%al$/;"	l
d2	init.asm	/^  d2:	e8 b4 02 00 00       	call   38b <mknod>$/;"	l
d2	mkdir.asm	/^  d2:	84 c0                	test   %al,%al$/;"	l
d2	rm.asm	/^  d2:	84 c0                	test   %al,%al$/;"	l
d2	stressfs.asm	/^  d2:	68 35 08 00 00       	push   $0x835$/;"	l
d20	usertests.asm	/^     d20:	74 68                	je     d8a <exitwait+0x7a>$/;"	l
d21	sh.asm	/^     d21:	74 1d                	je     d40 <gets+0x50>$/;"	l
d22	usertests.asm	/^     d22:	e8 b4 2b 00 00       	call   38db <wait>$/;"	l
d23	sh.asm	/^     d23:	3c 0d                	cmp    $0xd,%al$/;"	l
d25	sh.asm	/^     d25:	74 19                	je     d40 <gets+0x50>$/;"	l
d27	sh.asm	/^     d27:	89 de                	mov    %ebx,%esi$/;"	l
d27	usertests.asm	/^     d27:	39 d8                	cmp    %ebx,%eax$/;"	l
d29	sh.asm	/^     d29:	83 c3 01             	add    $0x1,%ebx$/;"	l
d29	usertests.asm	/^     d29:	75 2d                	jne    d58 <exitwait+0x48>$/;"	l
d2b	usertests.asm	/^     d2b:	83 ee 01             	sub    $0x1,%esi$/;"	l
d2c	sh.asm	/^     d2c:	3b 5d 0c             	cmp    0xc(%ebp),%ebx$/;"	l
d2e	usertests.asm	/^     d2e:	74 41                	je     d71 <exitwait+0x61>$/;"	l
d2f	sh.asm	/^     d2f:	7c cf                	jl     d00 <gets+0x10>$/;"	l
d3	cat.asm	/^  d3:	75 1b                	jne    f0 <cat+0x60>$/;"	l
d3	zombie.asm	/^  d3:	80 3c 02 00          	cmpb   $0x0,(%edx,%eax,1)$/;"	l
d30	usertests.asm	/^     d30:	e8 96 2b 00 00       	call   38cb <fork>$/;"	l
d31	sh.asm	/^     d31:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d34	sh.asm	/^     d34:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)$/;"	l
d35	usertests.asm	/^     d35:	89 c3                	mov    %eax,%ebx$/;"	l
d37	usertests.asm	/^     d37:	85 c0                	test   %eax,%eax$/;"	l
d38	sh.asm	/^     d38:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
d39	usertests.asm	/^     d39:	79 e5                	jns    d20 <exitwait+0x10>$/;"	l
d3b	sh.asm	/^     d3b:	5b                   	pop    %ebx$/;"	l
d3b	usertests.asm	/^     d3b:	83 ec 08             	sub    $0x8,%esp$/;"	l
d3c	sh.asm	/^     d3c:	5e                   	pop    %esi$/;"	l
d3d	sh.asm	/^     d3d:	5f                   	pop    %edi$/;"	l
d3e	sh.asm	/^     d3e:	5d                   	pop    %ebp$/;"	l
d3e	usertests.asm	/^     d3e:	68 99 4c 00 00       	push   $0x4c99$/;"	l
d3f	sh.asm	/^     d3f:	c3                   	ret    $/;"	l
d4	echo.asm	/^  d4:	c9                   	leave  $/;"	l
d4	grep.asm	/^  d4:	75 2d                	jne    103 <matchhere+0x43>$/;"	l
d4	kill.asm	/^  d4:	31 c0                	xor    %eax,%eax$/;"	l
d4	ln.asm	/^  d4:	31 c0                	xor    %eax,%eax$/;"	l
d4	mkdir.asm	/^  d4:	74 1a                	je     f0 <strcmp+0x40>$/;"	l
d4	rm.asm	/^  d4:	74 1a                	je     f0 <strcmp+0x40>$/;"	l
d40	sh.asm	/^     d40:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d43	sh.asm	/^     d43:	89 de                	mov    %ebx,%esi$/;"	l
d43	usertests.asm	/^     d43:	6a 01                	push   $0x1$/;"	l
d45	sh.asm	/^     d45:	c6 04 30 00          	movb   $0x0,(%eax,%esi,1)$/;"	l
d45	usertests.asm	/^     d45:	e8 e6 2c 00 00       	call   3a30 <printf>$/;"	l
d49	sh.asm	/^     d49:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
d4a	usertests.asm	/^     d4a:	83 c4 10             	add    $0x10,%esp$/;"	l
d4c	sh.asm	/^     d4c:	5b                   	pop    %ebx$/;"	l
d4d	sh.asm	/^     d4d:	5e                   	pop    %esi$/;"	l
d4d	usertests.asm	/^     d4d:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d4e	sh.asm	/^     d4e:	5f                   	pop    %edi$/;"	l
d4f	sh.asm	/^     d4f:	5d                   	pop    %ebp$/;"	l
d5	cat.asm	/^  d5:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d5	echo.asm	/^  d5:	c3                   	ret    $/;"	l
d5	sh.asm	/^      d5:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d5	wc.asm	/^  d5:	83 c4 10             	add    $0x10,%esp$/;"	l
d50	sh.asm	/^     d50:	c3                   	ret    $/;"	l
d50	usertests.asm	/^     d50:	5b                   	pop    %ebx$/;"	l
d51	sh.asm	/^     d51:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d51	usertests.asm	/^     d51:	5e                   	pop    %esi$/;"	l
d52	usertests.asm	/^     d52:	5d                   	pop    %ebp$/;"	l
d53	usertests.asm	/^     d53:	c3                   	ret    $/;"	l
d54	usertests.asm	/^     d54:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d58	sh.asm	/^     d58:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d58	usertests.asm	/^     d58:	83 ec 08             	sub    $0x8,%esp$/;"	l
d5b	usertests.asm	/^     d5b:	68 3b 41 00 00       	push   $0x413b$/;"	l
d5f	sh.asm	/^     d5f:	90                   	nop$/;"	l
d6	echo.asm	/^  d6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
d6	grep.asm	/^  d6:	e9 7d 00 00 00       	jmp    158 <matchhere+0x98>$/;"	l
d6	kill.asm	/^  d6:	29 d8                	sub    %ebx,%eax$/;"	l
d6	ln.asm	/^  d6:	29 d8                	sub    %ebx,%eax$/;"	l
d6	ls.asm	/^  d6:	83 c4 0c             	add    $0xc,%esp$/;"	l
d6	mkdir.asm	/^  d6:	89 d9                	mov    %ebx,%ecx$/;"	l
d6	rm.asm	/^  d6:	89 d9                	mov    %ebx,%ecx$/;"	l
d6	usertests.asm	/^      d6:	e8 d5 25 00 00       	call   26b0 <fourteen>$/;"	l
d60	sh.asm	/^     d60:	55                   	push   %ebp$/;"	l
d60	usertests.asm	/^     d60:	6a 01                	push   $0x1$/;"	l
d61	sh.asm	/^     d61:	89 e5                	mov    %esp,%ebp$/;"	l
d62	usertests.asm	/^     d62:	e8 c9 2c 00 00       	call   3a30 <printf>$/;"	l
d63	sh.asm	/^     d63:	56                   	push   %esi$/;"	l
d64	sh.asm	/^     d64:	53                   	push   %ebx$/;"	l
d65	sh.asm	/^     d65:	83 ec 08             	sub    $0x8,%esp$/;"	l
d67	usertests.asm	/^     d67:	83 c4 10             	add    $0x10,%esp$/;"	l
d68	sh.asm	/^     d68:	6a 00                	push   $0x0$/;"	l
d6a	sh.asm	/^     d6a:	ff 75 08             	push   0x8(%ebp)$/;"	l
d6a	usertests.asm	/^     d6a:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d6d	sh.asm	/^     d6d:	e8 f1 00 00 00       	call   e63 <open>$/;"	l
d6d	usertests.asm	/^     d6d:	5b                   	pop    %ebx$/;"	l
d6e	usertests.asm	/^     d6e:	5e                   	pop    %esi$/;"	l
d6f	usertests.asm	/^     d6f:	5d                   	pop    %ebp$/;"	l
d7	forktest.asm	/^  d7:	e8 d4 00 00 00       	call   1b0 <strlen>$/;"	l
d7	init.asm	/^  d7:	58                   	pop    %eax$/;"	l
d7	stressfs.asm	/^  d7:	6a 01                	push   $0x1$/;"	l
d7	zombie.asm	/^  d7:	89 c1                	mov    %eax,%ecx$/;"	l
d70	usertests.asm	/^     d70:	c3                   	ret    $/;"	l
d71	usertests.asm	/^     d71:	83 ec 08             	sub    $0x8,%esp$/;"	l
d72	sh.asm	/^     d72:	83 c4 10             	add    $0x10,%esp$/;"	l
d74	usertests.asm	/^     d74:	68 4b 41 00 00       	push   $0x414b$/;"	l
d75	sh.asm	/^     d75:	85 c0                	test   %eax,%eax$/;"	l
d77	sh.asm	/^     d77:	78 27                	js     da0 <stat+0x40>$/;"	l
d79	sh.asm	/^     d79:	83 ec 08             	sub    $0x8,%esp$/;"	l
d79	usertests.asm	/^     d79:	6a 01                	push   $0x1$/;"	l
d7b	usertests.asm	/^     d7b:	e8 b0 2c 00 00       	call   3a30 <printf>$/;"	l
d7c	sh.asm	/^     d7c:	ff 75 0c             	push   0xc(%ebp)$/;"	l
d7f	sh.asm	/^     d7f:	89 c3                	mov    %eax,%ebx$/;"	l
d8	cat.asm	/^  d8:	5b                   	pop    %ebx$/;"	l
d8	init.asm	/^  d8:	5a                   	pop    %edx$/;"	l
d8	kill.asm	/^  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
d8	ln.asm	/^  d8:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
d8	mkdir.asm	/^  d8:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
d8	rm.asm	/^  d8:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
d8	sh.asm	/^      d8:	68 e0 19 00 00       	push   $0x19e0$/;"	l
d8	wc.asm	/^  d8:	89 c6                	mov    %eax,%esi$/;"	l
d80	usertests.asm	/^     d80:	83 c4 10             	add    $0x10,%esp$/;"	l
d81	sh.asm	/^     d81:	50                   	push   %eax$/;"	l
d82	sh.asm	/^     d82:	e8 f4 00 00 00       	call   e7b <fstat>$/;"	l
d83	usertests.asm	/^     d83:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d86	usertests.asm	/^     d86:	5b                   	pop    %ebx$/;"	l
d87	sh.asm	/^     d87:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
d87	usertests.asm	/^     d87:	5e                   	pop    %esi$/;"	l
d88	usertests.asm	/^     d88:	5d                   	pop    %ebp$/;"	l
d89	usertests.asm	/^     d89:	c3                   	ret    $/;"	l
d8a	sh.asm	/^     d8a:	89 c6                	mov    %eax,%esi$/;"	l
d8a	usertests.asm	/^     d8a:	e8 44 2b 00 00       	call   38d3 <exit>$/;"	l
d8c	sh.asm	/^     d8c:	e8 ba 00 00 00       	call   e4b <close>$/;"	l
d8f	usertests.asm	/^     d8f:	90                   	nop$/;"	l
d9	cat.asm	/^  d9:	5e                   	pop    %esi$/;"	l
d9	init.asm	/^  d9:	6a 02                	push   $0x2$/;"	l
d9	ls.asm	/^  d9:	29 f2                	sub    %esi,%edx$/;"	l
d9	stressfs.asm	/^  d9:	e8 12 04 00 00       	call   4f0 <printf>$/;"	l
d9	zombie.asm	/^  d9:	75 f5                	jne    d0 <strlen+0x10>$/;"	l
d90	usertests.asm	/^     d90:	55                   	push   %ebp$/;"	l
d91	sh.asm	/^     d91:	83 c4 10             	add    $0x10,%esp$/;"	l
d91	usertests.asm	/^     d91:	89 e5                	mov    %esp,%ebp$/;"	l
d93	usertests.asm	/^     d93:	56                   	push   %esi$/;"	l
d94	sh.asm	/^     d94:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
d94	usertests.asm	/^     d94:	31 f6                	xor    %esi,%esi$/;"	l
d96	usertests.asm	/^     d96:	53                   	push   %ebx$/;"	l
d97	sh.asm	/^     d97:	89 f0                	mov    %esi,%eax$/;"	l
d97	usertests.asm	/^     d97:	83 ec 08             	sub    $0x8,%esp$/;"	l
d99	sh.asm	/^     d99:	5b                   	pop    %ebx$/;"	l
d9a	sh.asm	/^     d9a:	5e                   	pop    %esi$/;"	l
d9a	usertests.asm	/^     d9a:	68 58 41 00 00       	push   $0x4158$/;"	l
d9b	sh.asm	/^     d9b:	5d                   	pop    %ebp$/;"	l
d9c	sh.asm	/^     d9c:	c3                   	ret    $/;"	l
d9d	sh.asm	/^     d9d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
d9f	usertests.asm	/^     d9f:	6a 01                	push   $0x1$/;"	l
da	cat.asm	/^  da:	5d                   	pop    %ebp$/;"	l
da	wc.asm	/^  da:	85 c0                	test   %eax,%eax$/;"	l
da0	sh.asm	/^     da0:	be ff ff ff ff       	mov    $0xffffffff,%esi$/;"	l
da1	usertests.asm	/^     da1:	e8 8a 2c 00 00       	call   3a30 <printf>$/;"	l
da5	sh.asm	/^     da5:	eb ed                	jmp    d94 <stat+0x34>$/;"	l
da6	usertests.asm	/^     da6:	e8 a8 2b 00 00       	call   3953 <getpid>$/;"	l
da7	sh.asm	/^     da7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dab	usertests.asm	/^     dab:	89 c3                	mov    %eax,%ebx$/;"	l
dad	usertests.asm	/^     dad:	e8 19 2b 00 00       	call   38cb <fork>$/;"	l
dae	sh.asm	/^     dae:	66 90                	xchg   %ax,%ax$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf	typeref:typename:uchar[]
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	typeref:typename:uint	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	kernel.ld	/^	PROVIDE(data = .);$/;"	s	assignment:provide
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	typeref:typename:char[]	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate	typeref:typename:uint
db	cat.asm	/^  db:	c3                   	ret    $/;"	l
db	grep.asm	/^  db:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
db	init.asm	/^  db:	68 c8 07 00 00       	push   $0x7c8$/;"	l
db	kill.asm	/^  db:	c9                   	leave  $/;"	l
db	ln.asm	/^  db:	c9                   	leave  $/;"	l
db	ls.asm	/^  db:	05 f4 0d 00 00       	add    $0xdf4,%eax$/;"	l
db	mkdir.asm	/^  db:	38 c3                	cmp    %al,%bl$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc	typeref:typename:uint:1
db	rm.asm	/^  db:	38 c3                	cmp    %al,%bl$/;"	l
db	usertests.asm	/^      db:	e8 00 24 00 00       	call   24e0 <bigfile>$/;"	l
db	zombie.asm	/^  db:	89 c8                	mov    %ecx,%eax$/;"	l
db0	sh.asm	/^     db0:	55                   	push   %ebp$/;"	l
db1	sh.asm	/^     db1:	89 e5                	mov    %esp,%ebp$/;"	l
db2	usertests.asm	/^     db2:	83 c4 10             	add    $0x10,%esp$/;"	l
db3	sh.asm	/^     db3:	53                   	push   %ebx$/;"	l
db4	sh.asm	/^     db4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
db5	usertests.asm	/^     db5:	85 c0                	test   %eax,%eax$/;"	l
db7	sh.asm	/^     db7:	0f be 02             	movsbl (%edx),%eax$/;"	l
db7	usertests.asm	/^     db7:	74 0b                	je     dc4 <mem+0x34>$/;"	l
db9	usertests.asm	/^     db9:	e9 8a 00 00 00       	jmp    e48 <mem+0xb8>$/;"	l
dba	sh.asm	/^     dba:	8d 48 d0             	lea    -0x30(%eax),%ecx$/;"	l
dbd	sh.asm	/^     dbd:	80 f9 09             	cmp    $0x9,%cl$/;"	l
dbe	usertests.asm	/^     dbe:	66 90                	xchg   %ax,%ax$/;"	l
dc	cat.asm	/^  dc:	83 ec 08             	sub    $0x8,%esp$/;"	l
dc	forktest.asm	/^  dc:	83 c4 0c             	add    $0xc,%esp$/;"	l
dc	kill.asm	/^  dc:	c3                   	ret    $/;"	l
dc	ln.asm	/^  dc:	c3                   	ret    $/;"	l
dc	wc.asm	/^  dc:	7e 62                	jle    140 <wc+0xa0>$/;"	l
dc0	sh.asm	/^     dc0:	b9 00 00 00 00       	mov    $0x0,%ecx$/;"	l
dc0	usertests.asm	/^     dc0:	89 30                	mov    %esi,(%eax)$/;"	l
dc2	usertests.asm	/^     dc2:	89 c6                	mov    %eax,%esi$/;"	l
dc4	usertests.asm	/^     dc4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dc5	sh.asm	/^     dc5:	77 1e                	ja     de5 <atoi+0x35>$/;"	l
dc7	sh.asm	/^     dc7:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
dc7	usertests.asm	/^     dc7:	68 11 27 00 00       	push   $0x2711$/;"	l
dcc	usertests.asm	/^     dcc:	e8 8f 2e 00 00       	call   3c60 <malloc>$/;"	l
dce	sh.asm	/^     dce:	66 90                	xchg   %ax,%ax$/;"	l
dd	echo.asm	/^  dd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
dd	kill.asm	/^  dd:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
dd	ln.asm	/^  dd:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
dd	mkdir.asm	/^  dd:	74 e9                	je     c8 <strcmp+0x18>$/;"	l
dd	rm.asm	/^  dd:	74 e9                	je     c8 <strcmp+0x18>$/;"	l
dd	sh.asm	/^      dd:	e8 7e 0b 00 00       	call   c60 <strlen>$/;"	l
dd	zombie.asm	/^  dd:	5d                   	pop    %ebp$/;"	l
dd0	sh.asm	/^     dd0:	83 c2 01             	add    $0x1,%edx$/;"	l
dd1	usertests.asm	/^     dd1:	83 c4 10             	add    $0x10,%esp$/;"	l
dd3	sh.asm	/^     dd3:	8d 0c 89             	lea    (%ecx,%ecx,4),%ecx$/;"	l
dd4	usertests.asm	/^     dd4:	85 c0                	test   %eax,%eax$/;"	l
dd6	sh.asm	/^     dd6:	8d 4c 48 d0          	lea    -0x30(%eax,%ecx,2),%ecx$/;"	l
dd6	usertests.asm	/^     dd6:	75 e8                	jne    dc0 <mem+0x30>$/;"	l
dd8	usertests.asm	/^     dd8:	85 f6                	test   %esi,%esi$/;"	l
dda	sh.asm	/^     dda:	0f be 02             	movsbl (%edx),%eax$/;"	l
dda	usertests.asm	/^     dda:	74 18                	je     df4 <mem+0x64>$/;"	l
ddc	usertests.asm	/^     ddc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ddd	sh.asm	/^     ddd:	8d 58 d0             	lea    -0x30(%eax),%ebx$/;"	l
de	stressfs.asm	/^  de:	8d 85 de fd ff ff    	lea    -0x222(%ebp),%eax$/;"	l
de	wc.asm	/^  de:	31 ff                	xor    %edi,%edi$/;"	l
de	zombie.asm	/^  de:	c3                   	ret    $/;"	l
de0	sh.asm	/^     de0:	80 fb 09             	cmp    $0x9,%bl$/;"	l
de0	usertests.asm	/^     de0:	89 f0                	mov    %esi,%eax$/;"	l
de2	usertests.asm	/^     de2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
de3	sh.asm	/^     de3:	76 eb                	jbe    dd0 <atoi+0x20>$/;"	l
de5	sh.asm	/^     de5:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
de5	usertests.asm	/^     de5:	8b 36                	mov    (%esi),%esi$/;"	l
de7	usertests.asm	/^     de7:	50                   	push   %eax$/;"	l
de8	sh.asm	/^     de8:	89 c8                	mov    %ecx,%eax$/;"	l
de8	usertests.asm	/^     de8:	e8 e3 2d 00 00       	call   3bd0 <free>$/;"	l
dea	sh.asm	/^     dea:	c9                   	leave  $/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f	typeref:typename:int
deb	sh.asm	/^     deb:	c3                   	ret    $/;"	l
dec	sh.asm	/^     dec:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ded	usertests.asm	/^     ded:	83 c4 10             	add    $0x10,%esp$/;"	l
default	kernel.asm	/^    default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf	typeref:typename:uint
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode	typeref:typename:uint
dev	log.c	/^  int dev;$/;"	m	struct:log	typeref:typename:int	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat	typeref:typename:int
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw[]
devsw	file.h	/^struct devsw {$/;"	s
df	cat.asm	/^  df:	68 e8 07 00 00       	push   $0x7e8$/;"	l
df	forktest.asm	/^  df:	50                   	push   %eax$/;"	l
df	grep.asm	/^  df:	90                   	nop$/;"	l
df	mkdir.asm	/^  df:	29 d8                	sub    %ebx,%eax$/;"	l
df	rm.asm	/^  df:	29 d8                	sub    %ebx,%eax$/;"	l
df	zombie.asm	/^  df:	90                   	nop$/;"	l
df0	sh.asm	/^     df0:	55                   	push   %ebp$/;"	l
df0	usertests.asm	/^     df0:	85 f6                	test   %esi,%esi$/;"	l
df1	sh.asm	/^     df1:	89 e5                	mov    %esp,%ebp$/;"	l
df2	usertests.asm	/^     df2:	75 ec                	jne    de0 <mem+0x50>$/;"	l
df3	sh.asm	/^     df3:	57                   	push   %edi$/;"	l
df4	sh.asm	/^     df4:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
df4	usertests.asm	/^     df4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
df7	sh.asm	/^     df7:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
df7	usertests.asm	/^     df7:	68 00 50 00 00       	push   $0x5000$/;"	l
dfa	sh.asm	/^     dfa:	56                   	push   %esi$/;"	l
dfb	sh.asm	/^     dfb:	8b 75 0c             	mov    0xc(%ebp),%esi$/;"	l
dfc	usertests.asm	/^     dfc:	e8 5f 2e 00 00       	call   3c60 <malloc>$/;"	l
dfe	sh.asm	/^     dfe:	85 c0                	test   %eax,%eax$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f	typeref:typename:void
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f	typeref:typename:int
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f	typeref:struct:inode *
dirtest	usertests.c	/^void dirtest(void)$/;"	f	typeref:typename:void
disksize	memide.c	/^static int disksize;$/;"	v	typeref:typename:int	file:
dist	Makefile	/^dist:$/;"	t
dist-test	Makefile	/^dist-test:$/;"	t
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc	typeref:typename:uint:2
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc	typeref:typename:uint:2
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate	typeref:typename:ushort
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe	typeref:typename:ushort
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	cat.asm	/^   e:	56                   	push   %esi$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
e	echo.asm	/^   e:	56                   	push   %esi$/;"	l
e	grep.asm	/^   e:	56                   	push   %esi$/;"	l
e	init.asm	/^   e:	51                   	push   %ecx$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	kill.asm	/^   e:	56                   	push   %esi$/;"	l
e	ln.asm	/^   e:	89 e5                	mov    %esp,%ebp$/;"	l
e	ls.asm	/^   e:	56                   	push   %esi$/;"	l
e	mkdir.asm	/^   e:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
e	rm.asm	/^   e:	bf 01 00 00 00       	mov    $0x1,%edi$/;"	l
e	sh.asm	/^       e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e	usertests.asm	/^       e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e	wc.asm	/^   e:	56                   	push   %esi$/;"	l
e	zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	echo.asm	/^  e0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
e0	forktest.asm	/^  e0:	68 1f 04 00 00       	push   $0x41f$/;"	l
e0	grep.asm	/^  e0:	0f b6 0f             	movzbl (%edi),%ecx$/;"	l
e0	init.asm	/^  e0:	e8 9e 02 00 00       	call   383 <open>$/;"	l
e0	kill.asm	/^  e0:	31 c0                	xor    %eax,%eax$/;"	l
e0	ln.asm	/^  e0:	31 c0                	xor    %eax,%eax$/;"	l
e0	ls.asm	/^  e0:	52                   	push   %edx$/;"	l
e0	usertests.asm	/^      e0:	e8 3b 1c 00 00       	call   1d20 <subdir>$/;"	l
e0	wc.asm	/^  e0:	eb 14                	jmp    f6 <wc+0x56>$/;"	l
e0	zombie.asm	/^  e0:	31 c9                	xor    %ecx,%ecx$/;"	l
e00	sh.asm	/^     e00:	7e 13                	jle    e15 <memmove+0x25>$/;"	l
e01	usertests.asm	/^     e01:	83 c4 10             	add    $0x10,%esp$/;"	l
e02	sh.asm	/^     e02:	01 d0                	add    %edx,%eax$/;"	l
e04	sh.asm	/^     e04:	89 d7                	mov    %edx,%edi$/;"	l
e04	usertests.asm	/^     e04:	85 c0                	test   %eax,%eax$/;"	l
e06	sh.asm	/^     e06:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e06	usertests.asm	/^     e06:	74 20                	je     e28 <mem+0x98>$/;"	l
e08	usertests.asm	/^     e08:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e0b	usertests.asm	/^     e0b:	50                   	push   %eax$/;"	l
e0c	usertests.asm	/^     e0c:	e8 bf 2d 00 00       	call   3bd0 <free>$/;"	l
e0d	sh.asm	/^     e0d:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
e1	ls.asm	/^  e1:	6a 20                	push   $0x20$/;"	l
e1	mkdir.asm	/^  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
e1	rm.asm	/^  e1:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
e10	sh.asm	/^     e10:	a4                   	movsb  %ds:(%esi),%es:(%edi)$/;"	l
e11	sh.asm	/^     e11:	39 f8                	cmp    %edi,%eax$/;"	l
e11	usertests.asm	/^     e11:	58                   	pop    %eax$/;"	l
e12	usertests.asm	/^     e12:	5a                   	pop    %edx$/;"	l
e13	sh.asm	/^     e13:	75 fb                	jne    e10 <memmove+0x20>$/;"	l
e13	usertests.asm	/^     e13:	68 7c 41 00 00       	push   $0x417c$/;"	l
e15	sh.asm	/^     e15:	5e                   	pop    %esi$/;"	l
e16	sh.asm	/^     e16:	89 d0                	mov    %edx,%eax$/;"	l
e18	sh.asm	/^     e18:	5f                   	pop    %edi$/;"	l
e18	usertests.asm	/^     e18:	6a 01                	push   $0x1$/;"	l
e19	sh.asm	/^     e19:	5d                   	pop    %ebp$/;"	l
e1a	sh.asm	/^     e1a:	c3                   	ret    $/;"	l
e1a	usertests.asm	/^     e1a:	e8 11 2c 00 00       	call   3a30 <printf>$/;"	l
e1b	sh.asm	/^     e1b:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
e1f	usertests.asm	/^     e1f:	e8 af 2a 00 00       	call   38d3 <exit>$/;"	l
e2	kill.asm	/^  e2:	eb db                	jmp    bf <strcmp+0x2f>$/;"	l
e2	ln.asm	/^  e2:	eb db                	jmp    bf <strcmp+0x2f>$/;"	l
e2	sh.asm	/^      e2:	c7 04 24 e3 19 00 00 	movl   $0x19e3,(%esp)$/;"	l
e2	wc.asm	/^  e2:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
e2	zombie.asm	/^  e2:	5d                   	pop    %ebp$/;"	l
e20	sh.asm	/^     e20:	cd 40                	int    $0x40$/;"	l
e22	sh.asm	/^     e22:	c3                   	ret    $/;"	l
e23	sh.asm	/^     e23:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
e24	usertests.asm	/^     e24:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e28	sh.asm	/^     e28:	cd 40                	int    $0x40$/;"	l
e28	usertests.asm	/^     e28:	83 ec 08             	sub    $0x8,%esp$/;"	l
e2a	sh.asm	/^     e2a:	c3                   	ret    $/;"	l
e2b	sh.asm	/^     e2b:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
e2b	usertests.asm	/^     e2b:	68 62 41 00 00       	push   $0x4162$/;"	l
e3	grep.asm	/^  e3:	80 fb 24             	cmp    $0x24,%bl$/;"	l
e3	ls.asm	/^  e3:	50                   	push   %eax$/;"	l
e3	zombie.asm	/^  e3:	89 c8                	mov    %ecx,%eax$/;"	l
e30	sh.asm	/^     e30:	cd 40                	int    $0x40$/;"	l
e30	usertests.asm	/^     e30:	6a 01                	push   $0x1$/;"	l
e32	sh.asm	/^     e32:	c3                   	ret    $/;"	l
e32	usertests.asm	/^     e32:	e8 f9 2b 00 00       	call   3a30 <printf>$/;"	l
e33	sh.asm	/^     e33:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
e37	usertests.asm	/^     e37:	89 1c 24             	mov    %ebx,(%esp)$/;"	l
e38	sh.asm	/^     e38:	cd 40                	int    $0x40$/;"	l
e3a	sh.asm	/^     e3a:	c3                   	ret    $/;"	l
e3a	usertests.asm	/^     e3a:	e8 c4 2a 00 00       	call   3903 <kill>$/;"	l
e3b	sh.asm	/^     e3b:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
e3f	usertests.asm	/^     e3f:	e8 8f 2a 00 00       	call   38d3 <exit>$/;"	l
e4	cat.asm	/^  e4:	6a 01                	push   $0x1$/;"	l
e4	echo.asm	/^  e4:	31 c0                	xor    %eax,%eax$/;"	l
e4	kill.asm	/^  e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e4	ln.asm	/^  e4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e4	ls.asm	/^  e4:	e8 17 03 00 00       	call   400 <memset>$/;"	l
e4	mkdir.asm	/^  e4:	c9                   	leave  $/;"	l
e4	rm.asm	/^  e4:	c9                   	leave  $/;"	l
e4	stressfs.asm	/^  e4:	59                   	pop    %ecx$/;"	l
e40	sh.asm	/^     e40:	cd 40                	int    $0x40$/;"	l
e42	sh.asm	/^     e42:	c3                   	ret    $/;"	l
e43	sh.asm	/^     e43:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
e44	usertests.asm	/^     e44:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e48	sh.asm	/^     e48:	cd 40                	int    $0x40$/;"	l
e48	usertests.asm	/^     e48:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
e4a	sh.asm	/^     e4a:	c3                   	ret    $/;"	l
e4b	sh.asm	/^     e4b:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
e4b	usertests.asm	/^     e4b:	5b                   	pop    %ebx$/;"	l
e4c	usertests.asm	/^     e4c:	5e                   	pop    %esi$/;"	l
e4d	usertests.asm	/^     e4d:	5d                   	pop    %ebp$/;"	l
e4e	usertests.asm	/^     e4e:	e9 88 2a 00 00       	jmp    38db <wait>$/;"	l
e5	forktest.asm	/^  e5:	6a 01                	push   $0x1$/;"	l
e5	init.asm	/^  e5:	83 c4 10             	add    $0x10,%esp$/;"	l
e5	mkdir.asm	/^  e5:	c3                   	ret    $/;"	l
e5	rm.asm	/^  e5:	c3                   	ret    $/;"	l
e5	stressfs.asm	/^  e5:	5b                   	pop    %ebx$/;"	l
e5	usertests.asm	/^      e5:	e8 e6 14 00 00       	call   15d0 <linktest>$/;"	l
e5	zombie.asm	/^  e5:	c3                   	ret    $/;"	l
e50	sh.asm	/^     e50:	cd 40                	int    $0x40$/;"	l
e52	sh.asm	/^     e52:	c3                   	ret    $/;"	l
e53	sh.asm	/^     e53:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
e53	usertests.asm	/^     e53:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e58	sh.asm	/^     e58:	cd 40                	int    $0x40$/;"	l
e5a	sh.asm	/^     e5a:	c3                   	ret    $/;"	l
e5a	usertests.asm	/^     e5a:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi$/;"	l
e5b	sh.asm	/^     e5b:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
e6	cat.asm	/^  e6:	e8 d5 03 00 00       	call   4c0 <printf>$/;"	l
e6	echo.asm	/^  e6:	29 d8                	sub    %ebx,%eax$/;"	l
e6	grep.asm	/^  e6:	75 04                	jne    ec <matchhere+0x2c>$/;"	l
e6	mkdir.asm	/^  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e6	rm.asm	/^  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e6	stressfs.asm	/^  e6:	6a 00                	push   $0x0$/;"	l
e6	zombie.asm	/^  e6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
e60	sh.asm	/^     e60:	cd 40                	int    $0x40$/;"	l
e60	usertests.asm	/^     e60:	55                   	push   %ebp$/;"	l
e61	usertests.asm	/^     e61:	89 e5                	mov    %esp,%ebp$/;"	l
e62	sh.asm	/^     e62:	c3                   	ret    $/;"	l
e63	sh.asm	/^     e63:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
e63	usertests.asm	/^     e63:	57                   	push   %edi$/;"	l
e64	usertests.asm	/^     e64:	56                   	push   %esi$/;"	l
e65	usertests.asm	/^     e65:	53                   	push   %ebx$/;"	l
e66	usertests.asm	/^     e66:	83 ec 34             	sub    $0x34,%esp$/;"	l
e68	sh.asm	/^     e68:	cd 40                	int    $0x40$/;"	l
e69	usertests.asm	/^     e69:	68 84 41 00 00       	push   $0x4184$/;"	l
e6a	sh.asm	/^     e6a:	c3                   	ret    $/;"	l
e6b	sh.asm	/^     e6b:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
e6e	usertests.asm	/^     e6e:	6a 01                	push   $0x1$/;"	l
e7	forktest.asm	/^  e7:	e8 a7 02 00 00       	call   393 <write>$/;"	l
e70	sh.asm	/^     e70:	cd 40                	int    $0x40$/;"	l
e70	usertests.asm	/^     e70:	e8 bb 2b 00 00       	call   3a30 <printf>$/;"	l
e72	sh.asm	/^     e72:	c3                   	ret    $/;"	l
e73	sh.asm	/^     e73:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
e75	usertests.asm	/^     e75:	c7 04 24 93 41 00 00 	movl   $0x4193,(%esp)$/;"	l
e78	sh.asm	/^     e78:	cd 40                	int    $0x40$/;"	l
e7a	sh.asm	/^     e7a:	c3                   	ret    $/;"	l
e7b	sh.asm	/^     e7b:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
e7c	usertests.asm	/^     e7c:	e8 a2 2a 00 00       	call   3923 <unlink>$/;"	l
e8	echo.asm	/^  e8:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
e8	grep.asm	/^  e8:	84 c0                	test   %al,%al$/;"	l
e8	init.asm	/^  e8:	e9 3c ff ff ff       	jmp    29 <main+0x29>$/;"	l
e8	stressfs.asm	/^  e8:	bb 14 00 00 00       	mov    $0x14,%ebx$/;"	l
e8	wc.asm	/^  e8:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
e80	sh.asm	/^     e80:	cd 40                	int    $0x40$/;"	l
e81	usertests.asm	/^     e81:	5b                   	pop    %ebx$/;"	l
e82	sh.asm	/^     e82:	c3                   	ret    $/;"	l
e82	usertests.asm	/^     e82:	5e                   	pop    %esi$/;"	l
e83	sh.asm	/^     e83:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
e83	usertests.asm	/^     e83:	68 02 02 00 00       	push   $0x202$/;"	l
e88	sh.asm	/^     e88:	cd 40                	int    $0x40$/;"	l
e88	usertests.asm	/^     e88:	68 93 41 00 00       	push   $0x4193$/;"	l
e8a	sh.asm	/^     e8a:	c3                   	ret    $/;"	l
e8b	sh.asm	/^     e8b:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
e8d	usertests.asm	/^     e8d:	e8 81 2a 00 00       	call   3913 <open>$/;"	l
e9	ls.asm	/^  e9:	83 c4 10             	add    $0x10,%esp$/;"	l
e9	sh.asm	/^      e9:	c6 80 df 19 00 00 00 	movb   $0x0,0x19df(%eax)$/;"	l
e90	sh.asm	/^     e90:	cd 40                	int    $0x40$/;"	l
e92	sh.asm	/^     e92:	c3                   	ret    $/;"	l
e92	usertests.asm	/^     e92:	83 c4 10             	add    $0x10,%esp$/;"	l
e93	sh.asm	/^     e93:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
e95	usertests.asm	/^     e95:	85 c0                	test   %eax,%eax$/;"	l
e97	usertests.asm	/^     e97:	0f 88 2a 01 00 00    	js     fc7 <sharedfd+0x167>$/;"	l
e98	sh.asm	/^     e98:	cd 40                	int    $0x40$/;"	l
e9a	sh.asm	/^     e9a:	c3                   	ret    $/;"	l
e9b	sh.asm	/^     e9b:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
e9d	usertests.asm	/^     e9d:	89 c7                	mov    %eax,%edi$/;"	l
e9f	usertests.asm	/^     e9f:	8d 75 de             	lea    -0x22(%ebp),%esi$/;"	l
ea	grep.asm	/^  ea:	74 79                	je     165 <matchhere+0xa5>$/;"	l
ea	usertests.asm	/^      ea:	e8 51 13 00 00       	call   1440 <unlinkread>$/;"	l
ea0	sh.asm	/^     ea0:	cd 40                	int    $0x40$/;"	l
ea2	sh.asm	/^     ea2:	c3                   	ret    $/;"	l
ea2	usertests.asm	/^     ea2:	bb e8 03 00 00       	mov    $0x3e8,%ebx$/;"	l
ea3	sh.asm	/^     ea3:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
ea7	usertests.asm	/^     ea7:	e8 1f 2a 00 00       	call   38cb <fork>$/;"	l
ea8	sh.asm	/^     ea8:	cd 40                	int    $0x40$/;"	l
eaa	sh.asm	/^     eaa:	c3                   	ret    $/;"	l
eab	sh.asm	/^     eab:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
eac	usertests.asm	/^     eac:	83 f8 01             	cmp    $0x1,%eax$/;"	l
eaf	usertests.asm	/^     eaf:	89 45 d4             	mov    %eax,-0x2c(%ebp)$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	typeref:typename:char * []	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate	typeref:typename:uint
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe	typeref:typename:uint
eb	cat.asm	/^  eb:	e8 73 02 00 00       	call   363 <exit>$/;"	l
eb	echo.asm	/^  eb:	c9                   	leave  $/;"	l
eb	kill.asm	/^  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
eb	ln.asm	/^  eb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
eb0	sh.asm	/^     eb0:	cd 40                	int    $0x40$/;"	l
eb2	sh.asm	/^     eb2:	c3                   	ret    $/;"	l
eb2	usertests.asm	/^     eb2:	19 c0                	sbb    %eax,%eax$/;"	l
eb3	sh.asm	/^     eb3:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
eb4	usertests.asm	/^     eb4:	83 ec 04             	sub    $0x4,%esp$/;"	l
eb7	usertests.asm	/^     eb7:	83 e0 f3             	and    $0xfffffff3,%eax$/;"	l
eb8	sh.asm	/^     eb8:	cd 40                	int    $0x40$/;"	l
eba	sh.asm	/^     eba:	c3                   	ret    $/;"	l
eba	usertests.asm	/^     eba:	6a 0a                	push   $0xa$/;"	l
ebb	sh.asm	/^     ebb:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
ebc	usertests.asm	/^     ebc:	83 c0 70             	add    $0x70,%eax$/;"	l
ebf	usertests.asm	/^     ebf:	50                   	push   %eax$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate	typeref:typename:uint *
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context	typeref:typename:uint
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe	typeref:typename:uint
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate	typeref:typename:uint
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context	typeref:typename:uint
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe	typeref:typename:uint
ec	echo.asm	/^  ec:	c3                   	ret    $/;"	l
ec	forktest.asm	/^  ec:	e8 82 02 00 00       	call   373 <exit>$/;"	l
ec	grep.asm	/^  ec:	84 c9                	test   %cl,%cl$/;"	l
ec	ls.asm	/^  ec:	8d 65 f8             	lea    -0x8(%ebp),%esp$/;"	l
ec0	sh.asm	/^     ec0:	cd 40                	int    $0x40$/;"	l
ec0	usertests.asm	/^     ec0:	56                   	push   %esi$/;"	l
ec1	usertests.asm	/^     ec1:	e8 7a 28 00 00       	call   3740 <memset>$/;"	l
ec2	sh.asm	/^     ec2:	c3                   	ret    $/;"	l
ec3	sh.asm	/^     ec3:	66 90                	xchg   %ax,%ax$/;"	l
ec5	sh.asm	/^     ec5:	66 90                	xchg   %ax,%ax$/;"	l
ec6	usertests.asm	/^     ec6:	83 c4 10             	add    $0x10,%esp$/;"	l
ec7	sh.asm	/^     ec7:	66 90                	xchg   %ax,%ax$/;"	l
ec9	sh.asm	/^     ec9:	66 90                	xchg   %ax,%ax$/;"	l
ec9	usertests.asm	/^     ec9:	eb 0a                	jmp    ed5 <sharedfd+0x75>$/;"	l
ecb	sh.asm	/^     ecb:	66 90                	xchg   %ax,%ax$/;"	l
ecb	usertests.asm	/^     ecb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
ecd	sh.asm	/^     ecd:	66 90                	xchg   %ax,%ax$/;"	l
ecf	sh.asm	/^     ecf:	90                   	nop$/;"	l
ecf	usertests.asm	/^     ecf:	90                   	nop$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v	typeref:typename:char * []
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate	typeref:typename:uint
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe	typeref:typename:uint
ed	echo.asm	/^  ed:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
ed	init.asm	/^  ed:	66 90                	xchg   %ax,%ax$/;"	l
ed	mkdir.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	rm.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed	stressfs.asm	/^  ed:	50                   	push   %eax$/;"	l
ed	zombie.asm	/^  ed:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
ed0	sh.asm	/^     ed0:	55                   	push   %ebp$/;"	l
ed0	usertests.asm	/^     ed0:	83 eb 01             	sub    $0x1,%ebx$/;"	l
ed1	sh.asm	/^     ed1:	89 e5                	mov    %esp,%ebp$/;"	l
ed3	sh.asm	/^     ed3:	57                   	push   %edi$/;"	l
ed3	usertests.asm	/^     ed3:	74 26                	je     efb <sharedfd+0x9b>$/;"	l
ed4	sh.asm	/^     ed4:	56                   	push   %esi$/;"	l
ed5	sh.asm	/^     ed5:	53                   	push   %ebx$/;"	l
ed5	usertests.asm	/^     ed5:	83 ec 04             	sub    $0x4,%esp$/;"	l
ed6	sh.asm	/^     ed6:	83 ec 3c             	sub    $0x3c,%esp$/;"	l
ed8	usertests.asm	/^     ed8:	6a 0a                	push   $0xa$/;"	l
ed9	sh.asm	/^     ed9:	89 4d c4             	mov    %ecx,-0x3c(%ebp)$/;"	l
eda	usertests.asm	/^     eda:	56                   	push   %esi$/;"	l
edata	kernel.ld	/^	PROVIDE(edata = .);$/;"	s	assignment:provide
edb	usertests.asm	/^     edb:	57                   	push   %edi$/;"	l
edc	sh.asm	/^     edc:	89 d1                	mov    %edx,%ecx$/;"	l
edc	usertests.asm	/^     edc:	e8 12 2a 00 00       	call   38f3 <write>$/;"	l
ede	sh.asm	/^     ede:	89 45 b8             	mov    %eax,-0x48(%ebp)$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate	typeref:typename:uint
edi	proc.h	/^  uint edi;$/;"	m	struct:context	typeref:typename:uint
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe	typeref:typename:uint
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate	typeref:typename:uint
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe	typeref:typename:uint
ee	grep.asm	/^  ee:	74 58                	je     148 <matchhere+0x88>$/;"	l
ee	stressfs.asm	/^  ee:	e8 e0 02 00 00       	call   3d3 <open>$/;"	l
ee1	sh.asm	/^     ee1:	85 d2                	test   %edx,%edx$/;"	l
ee1	usertests.asm	/^     ee1:	83 c4 10             	add    $0x10,%esp$/;"	l
ee3	sh.asm	/^     ee3:	0f 89 7f 00 00 00    	jns    f68 <printint+0x98>$/;"	l
ee4	usertests.asm	/^     ee4:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
ee7	usertests.asm	/^     ee7:	74 e7                	je     ed0 <sharedfd+0x70>$/;"	l
ee9	sh.asm	/^     ee9:	f6 45 08 01          	testb  $0x1,0x8(%ebp)$/;"	l
ee9	usertests.asm	/^     ee9:	83 ec 08             	sub    $0x8,%esp$/;"	l
eec	usertests.asm	/^     eec:	68 84 4e 00 00       	push   $0x4e84$/;"	l
eed	sh.asm	/^     eed:	74 79                	je     f68 <printint+0x98>$/;"	l
eef	sh.asm	/^     eef:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)$/;"	l
ef	init.asm	/^  ef:	90                   	nop$/;"	l
ef	kill.asm	/^  ef:	90                   	nop$/;"	l
ef	ln.asm	/^  ef:	90                   	nop$/;"	l
ef	ls.asm	/^  ef:	89 d8                	mov    %ebx,%eax$/;"	l
ef	usertests.asm	/^      ef:	e8 7c 28 00 00       	call   2970 <dirfile>$/;"	l
ef	wc.asm	/^  ef:	83 c7 01             	add    $0x1,%edi$/;"	l
ef1	usertests.asm	/^     ef1:	6a 01                	push   $0x1$/;"	l
ef3	usertests.asm	/^     ef3:	e8 38 2b 00 00       	call   3a30 <printf>$/;"	l
ef6	sh.asm	/^     ef6:	f7 d9                	neg    %ecx$/;"	l
ef8	sh.asm	/^     ef8:	31 db                	xor    %ebx,%ebx$/;"	l
ef8	usertests.asm	/^     ef8:	83 c4 10             	add    $0x10,%esp$/;"	l
efa	sh.asm	/^     efa:	8d 75 d7             	lea    -0x29(%ebp),%esi$/;"	l
efb	usertests.asm	/^     efb:	8b 4d d4             	mov    -0x2c(%ebp),%ecx$/;"	l
efd	sh.asm	/^     efd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
efe	usertests.asm	/^     efe:	85 c9                	test   %ecx,%ecx$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	typeref:typename:char *	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate	typeref:typename:uint
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe	typeref:typename:uint
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate	typeref:typename:uint *
eip	proc.h	/^  uint eip;$/;"	m	struct:context	typeref:typename:uint
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe	typeref:typename:uint
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr	typeref:typename:uchar[12]
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end	kernel.ld	/^	PROVIDE(end = .);$/;"	s	assignment:provide
end_op	log.c	/^end_op(void)$/;"	f	typeref:typename:void
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr	typeref:typename:uint
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf	typeref:typename:ushort
entryother	Makefile	/^entryother: entryother.S$/;"	t
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v	typeref:typename:pde_t[]
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v	typeref:typename:pde_t[]
ep	kernel.asm	/^  ep = (char*)curproc->sz;$/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe	typeref:typename:uint
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate	typeref:typename:ushort
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe	typeref:typename:ushort
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate	typeref:typename:uint
esi	proc.h	/^  uint esi;$/;"	m	struct:context	typeref:typename:uint
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe	typeref:typename:uint
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate	typeref:typename:uint *
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe	typeref:typename:uint
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate	typeref:typename:uint
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate	typeref:typename:uint *
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate	typeref:typename:uint *
etext	kernel.ld	/^	PROVIDE(etext = .);	\/* Define the 'etext' symbol to this value *\/$/;"	s	assignment:provide
even	runoff.spec	/^even: bootasm.S   # mild preference$/;"	t
even	runoff.spec	/^even: bootmain.c  # mild preference$/;"	t
even	runoff.spec	/^even: console.c$/;"	t
even	runoff.spec	/^even: entry.S  # mild preference$/;"	t
even	runoff.spec	/^even: entryother.S  # mild preference$/;"	t
even	runoff.spec	/^even: ide.c$/;"	t
even	runoff.spec	/^even: kalloc.c  # mild preference$/;"	t
even	runoff.spec	/^even: kbd.h$/;"	t
even	runoff.spec	/^even: log.c$/;"	t
even	runoff.spec	/^even: main.c$/;"	t
even	runoff.spec	/^even: mp.c$/;"	t
even	runoff.spec	/^even: proc.c   # VERY important$/;"	t
even	runoff.spec	/^even: proc.h$/;"	t
even	runoff.spec	/^even: spinlock.h$/;"	t
exec	exec.c	/^exec(char *path, char **argv)$/;"	f	typeref:typename:int
execcmd	sh.c	/^execcmd(void)$/;"	f	typeref:struct:cmd *
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	usertests.c	/^exectest(void)$/;"	f	typeref:typename:void
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f	typeref:typename:void
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f	typeref:typename:void
exitwait	usertests.c	/^exitwait(void)$/;"	f	typeref:typename:void
f	cat.asm	/^   f:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
f	echo.asm	/^   f:	53                   	push   %ebx$/;"	l
f	grep.asm	/^   f:	53                   	push   %ebx$/;"	l
f	init.asm	/^   f:	83 ec 08             	sub    $0x8,%esp$/;"	l
f	kill.asm	/^   f:	53                   	push   %ebx$/;"	l
f	ls.asm	/^   f:	53                   	push   %ebx$/;"	l
f	stressfs.asm	/^   f:	55                   	push   %ebp$/;"	l
f	wc.asm	/^   f:	be 01 00 00 00       	mov    $0x1,%esi$/;"	l
f0	cat.asm	/^  f0:	50                   	push   %eax$/;"	l
f0	echo.asm	/^  f0:	31 c0                	xor    %eax,%eax$/;"	l
f0	grep.asm	/^  f0:	38 d9                	cmp    %bl,%cl$/;"	l
f0	init.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	kill.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	ln.asm	/^  f0:	55                   	push   %ebp$/;"	l
f0	mkdir.asm	/^  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
f0	rm.asm	/^  f0:	0f b6 59 01          	movzbl 0x1(%ecx),%ebx$/;"	l
f0	sh.asm	/^      f0:	e8 9e 0d 00 00       	call   e93 <chdir>$/;"	l
f0	zombie.asm	/^  f0:	55                   	push   %ebp$/;"	l
f00	sh.asm	/^     f00:	89 c8                	mov    %ecx,%eax$/;"	l
f00	usertests.asm	/^     f00:	0f 84 f5 00 00 00    	je     ffb <sharedfd+0x19b>$/;"	l
f02	sh.asm	/^     f02:	31 d2                	xor    %edx,%edx$/;"	l
f04	sh.asm	/^     f04:	89 cf                	mov    %ecx,%edi$/;"	l
f06	sh.asm	/^     f06:	f7 75 c4             	divl   -0x3c(%ebp)$/;"	l
f06	usertests.asm	/^     f06:	e8 d0 29 00 00       	call   38db <wait>$/;"	l
f09	sh.asm	/^     f09:	0f b6 92 f0 13 00 00 	movzbl 0x13f0(%edx),%edx$/;"	l
f0b	usertests.asm	/^     f0b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f0e	usertests.asm	/^     f0e:	31 db                	xor    %ebx,%ebx$/;"	l
f1	cat.asm	/^  f1:	50                   	push   %eax$/;"	l
f1	forktest.asm	/^  f1:	52                   	push   %edx$/;"	l
f1	init.asm	/^  f1:	31 c0                	xor    %eax,%eax$/;"	l
f1	kill.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	ln.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f1	ls.asm	/^  f1:	5b                   	pop    %ebx$/;"	l
f1	zombie.asm	/^  f1:	89 e5                	mov    %esp,%ebp$/;"	l
f10	sh.asm	/^     f10:	89 45 c0             	mov    %eax,-0x40(%ebp)$/;"	l
f10	usertests.asm	/^     f10:	57                   	push   %edi$/;"	l
f11	usertests.asm	/^     f11:	8d 7d e8             	lea    -0x18(%ebp),%edi$/;"	l
f13	sh.asm	/^     f13:	89 d8                	mov    %ebx,%eax$/;"	l
f14	usertests.asm	/^     f14:	e8 e2 29 00 00       	call   38fb <close>$/;"	l
f15	sh.asm	/^     f15:	8d 5b 01             	lea    0x1(%ebx),%ebx$/;"	l
f18	sh.asm	/^     f18:	8b 4d c0             	mov    -0x40(%ebp),%ecx$/;"	l
f19	usertests.asm	/^     f19:	58                   	pop    %eax$/;"	l
f1a	usertests.asm	/^     f1a:	5a                   	pop    %edx$/;"	l
f1b	sh.asm	/^     f1b:	88 14 1e             	mov    %dl,(%esi,%ebx,1)$/;"	l
f1b	usertests.asm	/^     f1b:	6a 00                	push   $0x0$/;"	l
f1d	usertests.asm	/^     f1d:	68 93 41 00 00       	push   $0x4193$/;"	l
f1e	sh.asm	/^     f1e:	39 7d c4             	cmp    %edi,-0x3c(%ebp)$/;"	l
f2	cat.asm	/^  f2:	68 fa 07 00 00       	push   $0x7fa$/;"	l
f2	echo.asm	/^  f2:	eb db                	jmp    cf <strcmp+0x2f>$/;"	l
f2	forktest.asm	/^  f2:	52                   	push   %edx$/;"	l
f2	grep.asm	/^  f2:	74 05                	je     f9 <matchhere+0x39>$/;"	l
f2	ls.asm	/^  f2:	5e                   	pop    %esi$/;"	l
f2	wc.asm	/^  f2:	39 fe                	cmp    %edi,%esi$/;"	l
f21	sh.asm	/^     f21:	76 dd                	jbe    f00 <printint+0x30>$/;"	l
f22	usertests.asm	/^     f22:	e8 ec 29 00 00       	call   3913 <open>$/;"	l
f23	sh.asm	/^     f23:	8b 4d bc             	mov    -0x44(%ebp),%ecx$/;"	l
f26	sh.asm	/^     f26:	85 c9                	test   %ecx,%ecx$/;"	l
f27	usertests.asm	/^     f27:	83 c4 10             	add    $0x10,%esp$/;"	l
f28	sh.asm	/^     f28:	74 0c                	je     f36 <printint+0x66>$/;"	l
f2a	sh.asm	/^     f2a:	c6 44 1d d8 2d       	movb   $0x2d,-0x28(%ebp,%ebx,1)$/;"	l
f2a	usertests.asm	/^     f2a:	31 d2                	xor    %edx,%edx$/;"	l
f2c	usertests.asm	/^     f2c:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
f2f	sh.asm	/^     f2f:	89 d8                	mov    %ebx,%eax$/;"	l
f2f	usertests.asm	/^     f2f:	85 c0                	test   %eax,%eax$/;"	l
f3	forktest.asm	/^  f3:	68 33 04 00 00       	push   $0x433$/;"	l
f3	init.asm	/^  f3:	89 e5                	mov    %esp,%ebp$/;"	l
f3	kill.asm	/^  f3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f3	ln.asm	/^  f3:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f3	ls.asm	/^  f3:	5d                   	pop    %ebp$/;"	l
f3	stressfs.asm	/^  f3:	83 c4 10             	add    $0x10,%esp$/;"	l
f3	zombie.asm	/^  f3:	57                   	push   %edi$/;"	l
f31	sh.asm	/^     f31:	ba 2d 00 00 00       	mov    $0x2d,%edx$/;"	l
f31	usertests.asm	/^     f31:	0f 88 aa 00 00 00    	js     fe1 <sharedfd+0x181>$/;"	l
f36	sh.asm	/^     f36:	8b 7d b8             	mov    -0x48(%ebp),%edi$/;"	l
f37	usertests.asm	/^     f37:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f39	sh.asm	/^     f39:	8d 5c 05 d7          	lea    -0x29(%ebp,%eax,1),%ebx$/;"	l
f3d	sh.asm	/^     f3d:	eb 07                	jmp    f46 <printint+0x76>$/;"	l
f3e	usertests.asm	/^     f3e:	66 90                	xchg   %ax,%ax$/;"	l
f3f	sh.asm	/^     f3f:	90                   	nop$/;"	l
f4	echo.asm	/^  f4:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f4	grep.asm	/^  f4:	80 fb 2e             	cmp    $0x2e,%bl$/;"	l
f4	ls.asm	/^  f4:	c3                   	ret    $/;"	l
f4	mkdir.asm	/^  f4:	31 c0                	xor    %eax,%eax$/;"	l
f4	rm.asm	/^  f4:	31 c0                	xor    %eax,%eax$/;"	l
f4	usertests.asm	/^      f4:	e8 77 2a 00 00       	call   2b70 <iref>$/;"	l
f4	wc.asm	/^  f4:	74 42                	je     138 <wc+0x98>$/;"	l
f4	zombie.asm	/^  f4:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
f40	sh.asm	/^     f40:	0f b6 13             	movzbl (%ebx),%edx$/;"	l
f40	usertests.asm	/^     f40:	83 ec 04             	sub    $0x4,%esp$/;"	l
f43	sh.asm	/^     f43:	83 eb 01             	sub    $0x1,%ebx$/;"	l
f43	usertests.asm	/^     f43:	89 55 d4             	mov    %edx,-0x2c(%ebp)$/;"	l
f46	sh.asm	/^     f46:	83 ec 04             	sub    $0x4,%esp$/;"	l
f46	usertests.asm	/^     f46:	6a 0a                	push   $0xa$/;"	l
f48	usertests.asm	/^     f48:	56                   	push   %esi$/;"	l
f49	sh.asm	/^     f49:	88 55 d7             	mov    %dl,-0x29(%ebp)$/;"	l
f49	usertests.asm	/^     f49:	ff 75 d0             	push   -0x30(%ebp)$/;"	l
f4c	sh.asm	/^     f4c:	6a 01                	push   $0x1$/;"	l
f4c	usertests.asm	/^     f4c:	e8 9a 29 00 00       	call   38eb <read>$/;"	l
f4e	sh.asm	/^     f4e:	56                   	push   %esi$/;"	l
f4f	sh.asm	/^     f4f:	57                   	push   %edi$/;"	l
f5	init.asm	/^  f5:	53                   	push   %ebx$/;"	l
f5	ls.asm	/^  f5:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f5	sh.asm	/^      f5:	83 c4 10             	add    $0x10,%esp$/;"	l
f50	sh.asm	/^     f50:	e8 ee fe ff ff       	call   e43 <write>$/;"	l
f51	usertests.asm	/^     f51:	83 c4 10             	add    $0x10,%esp$/;"	l
f54	usertests.asm	/^     f54:	85 c0                	test   %eax,%eax$/;"	l
f55	sh.asm	/^     f55:	83 c4 10             	add    $0x10,%esp$/;"	l
f56	usertests.asm	/^     f56:	7e 28                	jle    f80 <sharedfd+0x120>$/;"	l
f58	sh.asm	/^     f58:	39 de                	cmp    %ebx,%esi$/;"	l
f58	usertests.asm	/^     f58:	8b 55 d4             	mov    -0x2c(%ebp),%edx$/;"	l
f5a	sh.asm	/^     f5a:	75 e4                	jne    f40 <printint+0x70>$/;"	l
f5b	usertests.asm	/^     f5b:	89 f0                	mov    %esi,%eax$/;"	l
f5c	sh.asm	/^     f5c:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
f5d	usertests.asm	/^     f5d:	eb 13                	jmp    f72 <sharedfd+0x112>$/;"	l
f5f	sh.asm	/^     f5f:	5b                   	pop    %ebx$/;"	l
f5f	usertests.asm	/^     f5f:	90                   	nop$/;"	l
f6	init.asm	/^  f6:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
f6	kill.asm	/^  f6:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
f6	ln.asm	/^  f6:	80 3a 00             	cmpb   $0x0,(%edx)$/;"	l
f6	mkdir.asm	/^  f6:	29 d8                	sub    %ebx,%eax$/;"	l
f6	rm.asm	/^  f6:	29 d8                	sub    %ebx,%eax$/;"	l
f6	stressfs.asm	/^  f6:	89 c7                	mov    %eax,%edi$/;"	l
f6	wc.asm	/^  f6:	0f be 87 e0 0b 00 00 	movsbl 0xbe0(%edi),%eax$/;"	l
f60	sh.asm	/^     f60:	5e                   	pop    %esi$/;"	l
f60	usertests.asm	/^     f60:	80 f9 70             	cmp    $0x70,%cl$/;"	l
f61	sh.asm	/^     f61:	5f                   	pop    %edi$/;"	l
f62	sh.asm	/^     f62:	5d                   	pop    %ebp$/;"	l
f63	sh.asm	/^     f63:	c3                   	ret    $/;"	l
f63	usertests.asm	/^     f63:	0f 94 c1             	sete   %cl$/;"	l
f64	sh.asm	/^     f64:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f66	usertests.asm	/^     f66:	0f b6 c9             	movzbl %cl,%ecx$/;"	l
f68	sh.asm	/^     f68:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)$/;"	l
f69	usertests.asm	/^     f69:	01 cb                	add    %ecx,%ebx$/;"	l
f6b	usertests.asm	/^     f6b:	83 c0 01             	add    $0x1,%eax$/;"	l
f6e	usertests.asm	/^     f6e:	39 f8                	cmp    %edi,%eax$/;"	l
f6f	sh.asm	/^     f6f:	eb 87                	jmp    ef8 <printint+0x28>$/;"	l
f7	cat.asm	/^  f7:	6a 01                	push   $0x1$/;"	l
f7	grep.asm	/^  f7:	75 4f                	jne    148 <matchhere+0x88>$/;"	l
f7	zombie.asm	/^  f7:	8b 4d 10             	mov    0x10(%ebp),%ecx$/;"	l
f70	usertests.asm	/^     f70:	74 ce                	je     f40 <sharedfd+0xe0>$/;"	l
f71	sh.asm	/^     f71:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f72	usertests.asm	/^     f72:	0f b6 08             	movzbl (%eax),%ecx$/;"	l
f75	usertests.asm	/^     f75:	80 f9 63             	cmp    $0x63,%cl$/;"	l
f78	sh.asm	/^     f78:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f78	usertests.asm	/^     f78:	75 e6                	jne    f60 <sharedfd+0x100>$/;"	l
f7a	usertests.asm	/^     f7a:	83 c2 01             	add    $0x1,%edx$/;"	l
f7d	usertests.asm	/^     f7d:	eb ec                	jmp    f6b <sharedfd+0x10b>$/;"	l
f7f	sh.asm	/^     f7f:	90                   	nop$/;"	l
f7f	usertests.asm	/^     f7f:	90                   	nop$/;"	l
f8	forktest.asm	/^  f8:	6a 01                	push   $0x1$/;"	l
f8	mkdir.asm	/^  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
f8	rm.asm	/^  f8:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
f8	sh.asm	/^      f8:	85 c0                	test   %eax,%eax$/;"	l
f8	stressfs.asm	/^  f8:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
f80	sh.asm	/^     f80:	55                   	push   %ebp$/;"	l
f80	usertests.asm	/^     f80:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f81	sh.asm	/^     f81:	89 e5                	mov    %esp,%ebp$/;"	l
f83	sh.asm	/^     f83:	57                   	push   %edi$/;"	l
f83	usertests.asm	/^     f83:	ff 75 d0             	push   -0x30(%ebp)$/;"	l
f84	sh.asm	/^     f84:	56                   	push   %esi$/;"	l
f85	sh.asm	/^     f85:	53                   	push   %ebx$/;"	l
f86	sh.asm	/^     f86:	83 ec 2c             	sub    $0x2c,%esp$/;"	l
f86	usertests.asm	/^     f86:	e8 70 29 00 00       	call   38fb <close>$/;"	l
f89	sh.asm	/^     f89:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f8b	usertests.asm	/^     f8b:	c7 04 24 93 41 00 00 	movl   $0x4193,(%esp)$/;"	l
f8c	sh.asm	/^     f8c:	8b 75 08             	mov    0x8(%ebp),%esi$/;"	l
f8f	sh.asm	/^     f8f:	0f b6 13             	movzbl (%ebx),%edx$/;"	l
f9	cat.asm	/^  f9:	e8 c2 03 00 00       	call   4c0 <printf>$/;"	l
f9	grep.asm	/^  f9:	83 c7 01             	add    $0x1,%edi$/;"	l
f9	init.asm	/^  f9:	8b 5d 0c             	mov    0xc(%ebp),%ebx$/;"	l
f9	kill.asm	/^  f9:	74 15                	je     110 <strlen+0x20>$/;"	l
f9	ln.asm	/^  f9:	74 15                	je     110 <strlen+0x20>$/;"	l
f9	usertests.asm	/^      f9:	e8 92 2b 00 00       	call   2c90 <forktest>$/;"	l
f92	sh.asm	/^     f92:	84 d2                	test   %dl,%dl$/;"	l
f92	usertests.asm	/^     f92:	e8 8c 29 00 00       	call   3923 <unlink>$/;"	l
f94	sh.asm	/^     f94:	74 6a                	je     1000 <printf+0x80>$/;"	l
f96	sh.asm	/^     f96:	8d 45 10             	lea    0x10(%ebp),%eax$/;"	l
f97	usertests.asm	/^     f97:	8b 55 d4             	mov    -0x2c(%ebp),%edx$/;"	l
f99	sh.asm	/^     f99:	83 c3 01             	add    $0x1,%ebx$/;"	l
f9a	usertests.asm	/^     f9a:	83 c4 10             	add    $0x10,%esp$/;"	l
f9c	sh.asm	/^     f9c:	8d 7d e7             	lea    -0x19(%ebp),%edi$/;"	l
f9d	usertests.asm	/^     f9d:	81 fa 10 27 00 00    	cmp    $0x2710,%edx$/;"	l
f9f	sh.asm	/^     f9f:	31 c9                	xor    %ecx,%ecx$/;"	l
fa	forktest.asm	/^  fa:	e8 11 ff ff ff       	call   10 <printf>$/;"	l
fa	sh.asm	/^      fa:	0f 89 67 ff ff ff    	jns    67 <main+0x67>$/;"	l
fa	zombie.asm	/^  fa:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fa1	sh.asm	/^     fa1:	89 45 d0             	mov    %eax,-0x30(%ebp)$/;"	l
fa3	usertests.asm	/^     fa3:	75 5b                	jne    1000 <sharedfd+0x1a0>$/;"	l
fa4	sh.asm	/^     fa4:	eb 36                	jmp    fdc <printf+0x5c>$/;"	l
fa5	usertests.asm	/^     fa5:	81 fb 10 27 00 00    	cmp    $0x2710,%ebx$/;"	l
fa6	sh.asm	/^     fa6:	8d b4 26 00 00 00 00 	lea    0x0(%esi,%eiz,1),%esi$/;"	l
fab	usertests.asm	/^     fab:	75 53                	jne    1000 <sharedfd+0x1a0>$/;"	l
fad	sh.asm	/^     fad:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fad	usertests.asm	/^     fad:	83 ec 08             	sub    $0x8,%esp$/;"	l
fb	echo.asm	/^  fb:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
fb	kill.asm	/^  fb:	31 c0                	xor    %eax,%eax$/;"	l
fb	ln.asm	/^  fb:	31 c0                	xor    %eax,%eax$/;"	l
fb	mkdir.asm	/^  fb:	c9                   	leave  $/;"	l
fb	rm.asm	/^  fb:	c9                   	leave  $/;"	l
fb0	sh.asm	/^     fb0:	89 4d d4             	mov    %ecx,-0x2c(%ebp)$/;"	l
fb0	usertests.asm	/^     fb0:	68 9c 41 00 00       	push   $0x419c$/;"	l
fb3	sh.asm	/^     fb3:	b9 25 00 00 00       	mov    $0x25,%ecx$/;"	l
fb5	usertests.asm	/^     fb5:	6a 01                	push   $0x1$/;"	l
fb7	usertests.asm	/^     fb7:	e8 74 2a 00 00       	call   3a30 <printf>$/;"	l
fb8	sh.asm	/^     fb8:	83 f8 25             	cmp    $0x25,%eax$/;"	l
fbb	sh.asm	/^     fbb:	74 15                	je     fd2 <printf+0x52>$/;"	l
fbc	usertests.asm	/^     fbc:	83 c4 10             	add    $0x10,%esp$/;"	l
fbd	sh.asm	/^     fbd:	83 ec 04             	sub    $0x4,%esp$/;"	l
fbf	usertests.asm	/^     fbf:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
fc	grep.asm	/^  fc:	83 c6 01             	add    $0x1,%esi$/;"	l
fc	init.asm	/^  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
fc	ls.asm	/^  fc:	8d 74 26 00          	lea    0x0(%esi,%eiz,1),%esi$/;"	l
fc	mkdir.asm	/^  fc:	c3                   	ret    $/;"	l
fc	rm.asm	/^  fc:	c3                   	ret    $/;"	l
fc0	sh.asm	/^     fc0:	88 55 e7             	mov    %dl,-0x19(%ebp)$/;"	l
fc2	usertests.asm	/^     fc2:	5b                   	pop    %ebx$/;"	l
fc3	sh.asm	/^     fc3:	6a 01                	push   $0x1$/;"	l
fc3	usertests.asm	/^     fc3:	5e                   	pop    %esi$/;"	l
fc4	usertests.asm	/^     fc4:	5f                   	pop    %edi$/;"	l
fc5	sh.asm	/^     fc5:	57                   	push   %edi$/;"	l
fc5	usertests.asm	/^     fc5:	5d                   	pop    %ebp$/;"	l
fc6	sh.asm	/^     fc6:	56                   	push   %esi$/;"	l
fc6	usertests.asm	/^     fc6:	c3                   	ret    $/;"	l
fc7	sh.asm	/^     fc7:	e8 77 fe ff ff       	call   e43 <write>$/;"	l
fc7	usertests.asm	/^     fc7:	83 ec 08             	sub    $0x8,%esp$/;"	l
fca	usertests.asm	/^     fca:	68 58 4e 00 00       	push   $0x4e58$/;"	l
fcc	sh.asm	/^     fcc:	8b 4d d4             	mov    -0x2c(%ebp),%ecx$/;"	l
fcf	sh.asm	/^     fcf:	83 c4 10             	add    $0x10,%esp$/;"	l
fcf	usertests.asm	/^     fcf:	6a 01                	push   $0x1$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	8d 76 00             	lea    0x0(%esi),%esi$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd:	0f b6 19             	movzbl (%ecx),%ebx$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	typeref:typename:int	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	31 c9                	xor    %ecx,%ecx$/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	89 d7                	mov    %edx,%edi$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd1	usertests.asm	/^     fd1:	e8 5a 2a 00 00       	call   3a30 <printf>$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd2	sh.asm	/^     fd2:	0f b6 13             	movzbl (%ebx),%edx$/;"	l
fd5	sh.asm	/^     fd5:	83 c3 01             	add    $0x1,%ebx$/;"	l
fd6	usertests.asm	/^     fd6:	83 c4 10             	add    $0x10,%esp$/;"	l
fd8	sh.asm	/^     fd8:	84 d2                	test   %dl,%dl$/;"	l
fd9	usertests.asm	/^     fd9:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
fda	sh.asm	/^     fda:	74 24                	je     1000 <printf+0x80>$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	typeref:typename:int	file:
fdc	sh.asm	/^     fdc:	0f b6 c2             	movzbl %dl,%eax$/;"	l
fdc	usertests.asm	/^     fdc:	5b                   	pop    %ebx$/;"	l
fdd	usertests.asm	/^     fdd:	5e                   	pop    %esi$/;"	l
fde	usertests.asm	/^     fde:	5f                   	pop    %edi$/;"	l
fdf	sh.asm	/^     fdf:	85 c9                	test   %ecx,%ecx$/;"	l
fdf	usertests.asm	/^     fdf:	5d                   	pop    %ebp$/;"	l
fe	cat.asm	/^  fe:	e8 60 02 00 00       	call   363 <exit>$/;"	l
fe	usertests.asm	/^      fe:	e8 ed 1a 00 00       	call   1bf0 <bigdir>$/;"	l
fe0	usertests.asm	/^     fe0:	c3                   	ret    $/;"	l
fe1	sh.asm	/^     fe1:	74 cd                	je     fb0 <printf+0x30>$/;"	l
fe1	usertests.asm	/^     fe1:	83 ec 08             	sub    $0x8,%esp$/;"	l
fe3	sh.asm	/^     fe3:	83 f9 25             	cmp    $0x25,%ecx$/;"	l
fe4	usertests.asm	/^     fe4:	68 a4 4e 00 00       	push   $0x4ea4$/;"	l
fe6	sh.asm	/^     fe6:	75 ea                	jne    fd2 <printf+0x52>$/;"	l
fe8	sh.asm	/^     fe8:	83 f8 25             	cmp    $0x25,%eax$/;"	l
fe9	usertests.asm	/^     fe9:	6a 01                	push   $0x1$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc	typeref:typename:uint
feb	sh.asm	/^     feb:	0f 84 07 01 00 00    	je     10f8 <printf+0x178>$/;"	l
feb	usertests.asm	/^     feb:	e8 40 2a 00 00       	call   3a30 <printf>$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f	typeref:typename:int
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f	typeref:typename:int
ff	echo.asm	/^  ff:	90                   	nop$/;"	l
ff	forktest.asm	/^  ff:	e8 6f 02 00 00       	call   373 <exit>$/;"	l
ff	grep.asm	/^  ff:	84 c0                	test   %al,%al$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	stressfs.asm	/^  ff:	90                   	nop$/;"	l
ff	wc.asm	/^  ff:	3c 0a                	cmp    $0xa,%al$/;"	l
ff	zombie.asm	/^  ff:	fc                   	cld    $/;"	l
ff0	usertests.asm	/^     ff0:	83 c4 10             	add    $0x10,%esp$/;"	l
ff1	sh.asm	/^     ff1:	83 e8 63             	sub    $0x63,%eax$/;"	l
ff3	usertests.asm	/^     ff3:	8d 65 f4             	lea    -0xc(%ebp),%esp$/;"	l
ff4	sh.asm	/^     ff4:	83 f8 15             	cmp    $0x15,%eax$/;"	l
ff6	usertests.asm	/^     ff6:	5b                   	pop    %ebx$/;"	l
ff7	sh.asm	/^     ff7:	77 17                	ja     1010 <printf+0x90>$/;"	l
ff7	usertests.asm	/^     ff7:	5e                   	pop    %esi$/;"	l
ff8	usertests.asm	/^     ff8:	5f                   	pop    %edi$/;"	l
ff9	sh.asm	/^     ff9:	ff 24 85 98 13 00 00 	jmp    *0x1398(,%eax,4)$/;"	l
ff9	usertests.asm	/^     ff9:	5d                   	pop    %ebp$/;"	l
ffa	usertests.asm	/^     ffa:	c3                   	ret    $/;"	l
ffb	usertests.asm	/^     ffb:	e8 d3 28 00 00       	call   38d3 <exit>$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anonfd762eb60108	typeref:struct:file[]	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	typeref:typename:char *	file:
filealloc	file.c	/^filealloc(void)$/;"	f	typeref:struct:file *
fileclose	file.c	/^fileclose(struct file *f)$/;"	f	typeref:typename:void
filedup	file.c	/^filedup(struct file *f)$/;"	f	typeref:struct:file *
fileinit	file.c	/^fileinit(void)$/;"	f	typeref:typename:void
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f	typeref:typename:int
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr	typeref:typename:uint
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f	typeref:typename:int
fill_rtcdate	lapic.c	/^fill_rtcdate(struct rtcdate *r)$/;"	f	typeref:typename:void	file:
first	kernel.asm	/^    first = 0;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf	typeref:typename:int
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr	typeref:typename:uint
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr	typeref:typename:uint
flags	entry.S	/^  #define flags /;"	d	file:
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc	typeref:typename:uchar
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic	typeref:typename:uchar
fmtname	ls.c	/^fmtname(char *path)$/;"	f	typeref:typename:char *
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f	typeref:typename:int
fork1	sh.c	/^fork1(void)$/;"	f	typeref:typename:int
forkret	proc.c	/^forkret(void)$/;"	f	typeref:typename:void
forktest	forktest.c	/^forktest(void)$/;"	f	typeref:typename:void
forktest	usertests.c	/^forktest(void)$/;"	f	typeref:typename:void
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f	typeref:typename:void
fourteen	usertests.c	/^fourteen(void)$/;"	f	typeref:typename:void
free	umalloc.c	/^free(void *ap)$/;"	f	typeref:typename:void
freeblock	mkfs.c	/^uint freeblock;$/;"	v	typeref:typename:uint
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v	typeref:typename:uint
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon69d64d0c0108	typeref:struct:run *	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	typeref:typename:Header *	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f	typeref:typename:void
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f	typeref:typename:void
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate	typeref:typename:ushort
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe	typeref:typename:ushort
fs.img	Makefile	/^fs.img: mkfs README $(UPROGS)$/;"	t
fsfd	mkfs.c	/^int fsfd;$/;"	v	typeref:typename:int
fsfull	usertests.c	/^fsfull()$/;"	f	typeref:typename:void
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anonfd762eb60108
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc	typeref:typename:uint:1
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:segdesc[]
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f	typeref:typename:void
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f	typeref:typename:int
gets	ulib.c	/^gets(char *buf, int max)$/;"	f	typeref:typename:char *
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f	typeref:typename:int
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f	typeref:typename:void
growproc	proc.c	/^growproc(int n)$/;"	f	typeref:typename:int
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate	typeref:typename:ushort
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe	typeref:typename:ushort
havedisk1	ide.c	/^static int havedisk1;$/;"	v	typeref:typename:int	file:
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f	typeref:typename:int
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f	typeref:typename:int
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate	typeref:typename:uint
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f	typeref:struct:inode *
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f	typeref:typename:uint
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f	typeref:typename:void
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon7c96edaf0108
ideinit	ide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideinit	memide.c	/^ideinit(void)$/;"	f	typeref:typename:void
ideintr	ide.c	/^ideintr(void)$/;"	f	typeref:typename:void
ideintr	memide.c	/^ideintr(void)$/;"	f	typeref:typename:void
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf *	file:
iderw	ide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
iderw	memide.c	/^iderw(struct buf *b)$/;"	f	typeref:typename:void
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	typeref:typename:void	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	typeref:typename:int	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc[256]
idtinit	trap.c	/^idtinit(void)$/;"	f	typeref:typename:void
idup	fs.c	/^idup(struct inode *ip)$/;"	f	typeref:struct:inode *
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	typeref:struct:inode *	file:
iinit	fs.c	/^iinit(int dev)$/;"	f	typeref:typename:void
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f	typeref:typename:void
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp	typeref:typename:uchar
inb	x86.h	/^inb(ushort port)$/;"	f	typeref:typename:uchar
init	initcode.S	/^init:$/;"	l
initcode	Makefile	/^initcode: initcode.S$/;"	t
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f	typeref:typename:void
initlog	log.c	/^initlog(int dev)$/;"	f	typeref:typename:void
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc *	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f	typeref:typename:void
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f	typeref:typename:void
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat	typeref:typename:uint
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon7c96edaf0108	typeref:struct:inode[]	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock	typeref:typename:uint
input	console.c	/^} input;$/;"	v	typeref:struct:__anon96a473a90208
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f	typeref:typename:void
install_trans	log.c	/^install_trans(void)$/;"	f	typeref:typename:void	file:
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = mycpu()->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu	typeref:typename:int
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode	typeref:typename:uint
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent	typeref:typename:ushort
inum	usertests.c	/^    ushort inum;$/;"	m	struct:concreate::__anonaf504e680208	typeref:typename:ushort	file:
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:typename:volatile struct ioapic *
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f	typeref:typename:void
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v	typeref:typename:uchar
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f	typeref:typename:void
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	typeref:typename:uint	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	typeref:typename:void	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate	typeref:typename:ushort
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:inode *
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f	typeref:typename:void
iputtest	usertests.c	/^iputtest(void)$/;"	f	typeref:typename:void
iref	usertests.c	/^iref(void)$/;"	f	typeref:typename:void
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	typeref:typename:int	file:
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	typeref:typename:void	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f	typeref:typename:void
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f	typeref:typename:void
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f	typeref:typename:void
kalloc	kalloc.c	/^kalloc(void)$/;"	f	typeref:typename:char *
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f	typeref:typename:int
kbdintr	kbd.c	/^kbdintr(void)$/;"	f	typeref:typename:void
kernel	Makefile	/^kernel: $(OBJS) entry.o entryother initcode kernel.ld$/;"	t
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kernelmemfs	Makefile	/^kernelmemfs: $(MEMFSOBJS) entry.o entryother initcode kernel.ld fs.img$/;"	t
kfree	kalloc.c	/^kfree(char *v)$/;"	f	typeref:typename:void
kill	proc.c	/^kill(int pid)$/;"	f	typeref:typename:int
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc	typeref:typename:int
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f	typeref:typename:void
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f	typeref:typename:void
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap[]
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon69d64d0c0108
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v	typeref:typename:pde_t *
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc	typeref:typename:char *
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f	typeref:typename:void
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v	typeref:typename:volatile uint *
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf	typeref:typename:uint *
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f	typeref:typename:void
lapicid	lapic.c	/^lapicid(void)$/;"	f	typeref:typename:int
lapicinit	lapic.c	/^lapicinit(void)$/;"	f	typeref:typename:void
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f	typeref:typename:void
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	typeref:typename:void	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(uint val)$/;"	f	typeref:typename:void
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate	typeref:typename:ushort
left	runoff.spec	/^left: fs.c  # mild preference$/;"	t
left	runoff.spec	/^left: log.c$/;"	t
left	runoff.spec	/^left: mp.c$/;"	t
left	runoff.spec	/^left: proc.h$/;"	t
left	runoff.spec	/^left: spinlock.h$/;"	t
left	runoff.spec	/^left: vm.c$/;"	t
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp	typeref:typename:uchar
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf	typeref:typename:ushort
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f	typeref:typename:void
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f	typeref:typename:void
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:16
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc	typeref:typename:uint:4
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate	typeref:typename:uint
linktest	usertests.c	/^linktest(void)$/;"	f	typeref:typename:void
linkunlink	usertests.c	/^linkunlink()$/;"	f	typeref:typename:void
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:spinlock
loadgs	x86.h	/^loadgs(ushort v)$/;"	f	typeref:typename:void
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f	typeref:typename:int
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon0f27d3d00108	typeref:struct:spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon96a473a90108	typeref:struct:spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anonfd762eb60108	typeref:struct:spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon7c96edaf0108	typeref:struct:spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon69d64d0c0108	typeref:struct:spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:spinlock	file:
lock	proc.c	/^  struct spinlock lock;$/;"	m	struct:__anon156e3e2a0108	typeref:struct:spinlock	file:
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock	typeref:typename:uint
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock	typeref:typename:uint
locking	console.c	/^  int locking;$/;"	m	struct:__anon96a473a90108	typeref:typename:int	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f	typeref:typename:void
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock	typeref:typename:uint
ls	ls.c	/^ls(char *path)$/;"	f	typeref:typename:void
ltr	x86.h	/^ltr(ushort sel)$/;"	f	typeref:typename:void
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr	typeref:typename:ushort
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr	typeref:typename:uint
magic	entry.S	/^  #define magic /;"	d	file:
main	cat.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	echo.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	forktest.c	/^main(void)$/;"	f	typeref:typename:int
main	grep.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	init.c	/^main(void)$/;"	f	typeref:typename:int
main	kill.c	/^main(int argc, char **argv)$/;"	f	typeref:typename:int
main	ln.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	ls.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	main.c	/^main(void)$/;"	f	typeref:typename:int
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	rm.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	sh.c	/^main(void)$/;"	f	typeref:typename:int
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	usertests.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	wc.c	/^main(int argc, char *argv[])$/;"	f	typeref:typename:int
main	zombie.c	/^main(void)$/;"	f	typeref:typename:int
major	file.h	/^  short major;$/;"	m	struct:inode	typeref:typename:short
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f	typeref:typename:void *
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	typeref:typename:int	file:
match	grep.c	/^match(char *re, char *text)$/;"	f	typeref:typename:int
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f	typeref:typename:int
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f	typeref:typename:int
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f	typeref:typename:void
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f	typeref:typename:int
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	typeref:typename:uchar *	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f	typeref:typename:void *
memmove	ulib.c	/^memmove(void *vdst, const void *vsrc, int n)$/;"	f	typeref:typename:void *
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f	typeref:typename:void *
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr	typeref:typename:uint
microdelay	lapic.c	/^microdelay(int us)$/;"	f	typeref:typename:void
min	fs.c	/^#define min(/;"	d	file:
min	mkfs.c	/^#define min(/;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode	typeref:typename:short
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode	typeref:typename:short
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate	typeref:typename:uint
mkfs	Makefile	/^mkfs: mkfs.c fs.h$/;"	t
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	typeref:typename:int	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate	typeref:typename:uint
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	typeref:typename:Header *	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	typeref:struct:mpconf *	file:
mpenter	main.c	/^mpenter(void)$/;"	f	typeref:typename:void	file:
mpinit	mp.c	/^mpinit(void)$/;"	f	typeref:typename:void
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	typeref:typename:void	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	typeref:struct:mp *	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	typeref:struct:mp *	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mycpu	proc.c	/^mycpu(void)$/;"	f	typeref:struct:cpu *
myproc	proc.c	/^myproc(void) {$/;"	f	typeref:struct:proc *
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	typeref:typename:int	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^    ret$/;"	l
name	echo.asm	/^    ret$/;"	l
name	forktest.asm	/^    ret$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent	typeref:typename:char[]
name	grep.asm	/^    ret$/;"	l
name	init.asm	/^    ret$/;"	l
name	kill.asm	/^    ret$/;"	l
name	ln.asm	/^    ret$/;"	l
name	ls.asm	/^    ret$/;"	l
name	mkdir.asm	/^    ret$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc	typeref:typename:char[16]
name	rm.asm	/^    ret$/;"	l
name	sh.asm	/^    ret$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock	typeref:typename:char *
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock	typeref:typename:char *
name	stressfs.asm	/^    ret$/;"	l
name	usertests.asm	/^    ret$/;"	l
name	usertests.c	/^    char name[14];$/;"	m	struct:concreate::__anonaf504e680208	typeref:typename:char[14]	file:
name	usertests.c	/^char name[3];$/;"	v	typeref:typename:char[3]
name	wc.asm	/^    ret$/;"	l
name	zombie.asm	/^    ret$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f	typeref:typename:int
namei	fs.c	/^namei(char *path)$/;"	f	typeref:struct:inode *
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f	typeref:struct:inode *
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	typeref:struct:inode *	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v	typeref:typename:int
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock	typeref:typename:uint
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v	typeref:typename:int
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu	typeref:typename:int
ncpu	mp.c	/^int ncpu;$/;"	v	typeref:typename:int
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf *
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run *	file:
nextpid	proc.c	/^int nextpid = 1;$/;"	v	typeref:typename:int
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v	typeref:typename:int
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock	typeref:typename:uint
nlink	file.h	/^  short nlink;$/;"	m	struct:inode	typeref:typename:short
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode	typeref:typename:short
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat	typeref:typename:short
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock	typeref:typename:uint
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v	typeref:typename:int
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v	typeref:typename:int
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v	typeref:typename:uchar[256]
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	typeref:typename:uint	file:
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f	typeref:struct:cmd *
num	kernel.asm	/^  num = curproc->tf->eax;$/;"	d
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	typeref:typename:uint	file:
odd	runoff.spec	/^odd: fs.c   # VERY important$/;"	t
odd	runoff.spec	/^odd: sh.c$/;"	t
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf	typeref:typename:ushort
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf	typeref:typename:uint *
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe	typeref:typename:uint
off	elf.h	/^  uint off;$/;"	m	struct:proghdr	typeref:typename:uint
off	file.h	/^  uint off;$/;"	m	struct:file	typeref:typename:uint
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc	typeref:typename:uint:16
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:file * []
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = curproc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f	typeref:typename:void
opentest	usertests.c	/^opentest(void)$/;"	f	typeref:typename:void
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f	typeref:typename:void
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f	typeref:typename:void
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	typeref:typename:int	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f	typeref:typename:void
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kernel.asm	/^  p = c->proc;$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc	typeref:typename:uint:1
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc	typeref:typename:uint:1
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	typeref:typename:uint[3]	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate	typeref:typename:ushort
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe	typeref:typename:ushort
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate	typeref:typename:ushort
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe	typeref:typename:ushort
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate	typeref:typename:ushort
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe	typeref:typename:ushort
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate	typeref:typename:ushort
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe	typeref:typename:ushort
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate	typeref:typename:ushort
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe	typeref:typename:ushort
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate	typeref:typename:ushort
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe	typeref:typename:ushort
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate	typeref:typename:ushort
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate	typeref:typename:ushort
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate	typeref:typename:ushort
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr	typeref:typename:uint
panic	console.c	/^panic(char *s)$/;"	f	typeref:typename:void
panic	sh.c	/^panic(char *s)$/;"	f	typeref:typename:void
panicked	console.c	/^static int panicked = 0;$/;"	v	typeref:typename:int	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc *
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f	typeref:struct:cmd *
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f	typeref:struct:cmd *
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f	typeref:struct:cmd *
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock	typeref:typename:uint[10]
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	types.h	/^typedef uint pde_t;$/;"	t	typeref:typename:uint
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f	typeref:typename:int
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	typeref:typename:int	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc	typeref:typename:pde_t *
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr	typeref:typename:uint
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	typeref:typename:uint	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	typeref:typename:uint	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp	typeref:typename:void *
picinit	picirq.c	/^picinit(void)$/;"	f	typeref:typename:void
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc	typeref:typename:int
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock	typeref:typename:int
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f	typeref:typename:void
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:pipe *
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f	typeref:typename:void
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f	typeref:typename:int
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f	typeref:typename:void
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f	typeref:struct:cmd *
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f	typeref:typename:int
popcli	spinlock.c	/^popcli(void)$/;"	f	typeref:typename:void
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f	typeref:typename:void
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf *
print	Makefile	/^print: xv6.pdf$/;"	t
printf	forktest.c	/^printf(int fd, const char *s, ...)$/;"	f	typeref:typename:void
printf	printf.c	/^printf(int fd, const char *fmt, ...)$/;"	f	typeref:typename:void
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	typeref:typename:void	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	typeref:typename:void	file:
proc	proc.c	/^  struct proc proc[NPROC];$/;"	m	struct:__anon156e3e2a0108	typeref:struct:proc[]	file:
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:proc *
proc	proc.h	/^struct proc {$/;"	s
procdump	proc.c	/^procdump(void)$/;"	f	typeref:typename:void
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf	typeref:typename:uchar[20]
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	proc.c	/^} ptable;$/;"	v	typeref:struct:__anon156e3e2a0108
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t	typeref:typename:uint
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anonf5a2dce30108	typeref:union:header *	file:
pushcli	spinlock.c	/^pushcli(void)$/;"	f	typeref:typename:void
putc	printf.c	/^putc(int fd, char c)$/;"	f	typeref:typename:void	file:
qemu	Makefile	/^qemu: fs.img xv6.img$/;"	t
qemu-gdb	Makefile	/^qemu-gdb: fs.img xv6.img .gdbinit$/;"	t
qemu-memfs	Makefile	/^qemu-memfs: xv6memfs.img$/;"	t
qemu-nox	Makefile	/^qemu-nox: fs.img xv6.img$/;"	t
qemu-nox-gdb	Makefile	/^qemu-nox-gdb: fs.img xv6.img .gdbinit$/;"	t
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf *
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked && (lk->pid == myproc()->pid);$/;"	d
r	kernel.asm	/^  r = lock->locked && lock->cpu == mycpu();$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
rand	usertests.c	/^rand()$/;"	f	typeref:typename:unsigned int
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v	typeref:typename:unsigned long
rcr2	x86.h	/^rcr2(void)$/;"	f	typeref:typename:uint
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
read_head	log.c	/^read_head(void)$/;"	f	typeref:typename:void	file:
readable	file.h	/^  char readable;$/;"	m	struct:file	typeref:typename:char
readeflags	x86.h	/^readeflags(void)$/;"	f	typeref:typename:uint
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f	typeref:typename:int
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f	typeref:typename:void
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f	typeref:typename:void
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f	typeref:typename:void
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	typeref:typename:void	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f	typeref:struct:cmd *
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode	typeref:typename:int
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file	typeref:typename:int
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf	typeref:typename:uint
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	typeref:typename:uint	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f	typeref:typename:void
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f	typeref:typename:void
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf	typeref:typename:uchar
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp	typeref:typename:uchar[3]
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc	typeref:typename:uchar[8]
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
right	runoff.spec	/^right: proc.c   # VERY important$/;"	t
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:cmd *	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:cmd *	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
rmdot	usertests.c	/^rmdot(void)$/;"	f	typeref:typename:void
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f	typeref:typename:void
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc	typeref:typename:uint:1
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc	typeref:typename:uint:3
rtcdate	date.h	/^struct rtcdate {$/;"	s
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f	typeref:typename:void
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc	typeref:typename:uint:1
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc	typeref:typename:uint:1
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anonf5a2dce30108	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	usertests.c	/^sbrktest(void)$/;"	f	typeref:typename:void
sched	proc.c	/^sched(void)$/;"	f	typeref:typename:void
scheduler	proc.c	/^scheduler(void)$/;"	f	typeref:typename:void
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:context *
second	date.h	/^  uint second;$/;"	m	struct:rtcdate	typeref:typename:uint
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f	typeref:typename:void
seq	usertests.asm	/^  seq = 0;$/;"	d
setupkvm	vm.c	/^setupkvm(void)$/;"	f	typeref:typename:pde_t *
sharedfd	usertests.c	/^sharedfd(void)$/;"	f	typeref:typename:void
sheet1	runoff.spec	/^sheet1: left$/;"	t
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr	typeref:typename:ushort
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v	typeref:typename:uchar[256]
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v	typeref:typename:uchar[256]
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr	typeref:typename:ushort
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr	typeref:typename:uint
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr	typeref:typename:ushort
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp	typeref:typename:uchar[4]
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc	typeref:typename:uchar[4]
size	file.h	/^  uint size;$/;"	m	struct:inode	typeref:typename:uint
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode	typeref:typename:uint
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock	typeref:typename:uint
size	log.c	/^  int size;$/;"	m	struct:log	typeref:typename:int	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat	typeref:typename:uint
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anonf5a2dce30108	typeref:typename:uint	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	typeref:typename:char *	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f	typeref:typename:void
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp	typeref:typename:uchar
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate	typeref:typename:ushort
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe	typeref:typename:ushort
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate	typeref:typename:ushort
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate	typeref:typename:ushort
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate	typeref:typename:ushort
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	typeref:typename:int	file:
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu	typeref:typename:volatile uint
startothers	main.c	/^startothers(void)$/;"	f	typeref:typename:void	file:
stat	mkfs.c	/^#define stat /;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(const char *n, struct stat *st)$/;"	f	typeref:typename:int
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f	typeref:typename:void
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	/^#define static_assert(/;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v	typeref:typename:int
sti	x86.h	/^sti(void)$/;"	f	typeref:typename:void
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f	typeref:typename:void
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f	typeref:typename:char *
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f	typeref:typename:int
strcpy	ulib.c	/^strcpy(char *s, const char *t)$/;"	f	typeref:typename:char *
strlen	string.c	/^strlen(const char *s)$/;"	f	typeref:typename:int
strlen	ulib.c	/^strlen(const char *s)$/;"	f	typeref:typename:uint
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f	typeref:typename:int
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f	typeref:typename:char *
struct	kernel.asm	/^  struct proc *curproc = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f	typeref:typename:void
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	typeref:typename:uchar	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f	typeref:typename:void
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f	typeref:typename:void
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v	typeref:typename:char[]
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f	typeref:typename:int
sys_close	sysfile.c	/^sys_close(void)$/;"	f	typeref:typename:int
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f	typeref:typename:int
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f	typeref:typename:int
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f	typeref:typename:int
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f	typeref:typename:int
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f	typeref:typename:int
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f	typeref:typename:int
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f	typeref:typename:int
sys_link	sysfile.c	/^sys_link(void)$/;"	f	typeref:typename:int
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f	typeref:typename:int
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f	typeref:typename:int
sys_open	sysfile.c	/^sys_open(void)$/;"	f	typeref:typename:int
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f	typeref:typename:int
sys_read	sysfile.c	/^sys_read(void)$/;"	f	typeref:typename:int
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f	typeref:typename:int
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f	typeref:typename:int
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f	typeref:typename:int
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f	typeref:typename:int
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f	typeref:typename:int
sys_write	sysfile.c	/^sys_write(void)$/;"	f	typeref:typename:int
syscall	syscall.c	/^syscall(void)$/;"	f	typeref:typename:void
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	typeref:typename:int (* [])(void)	file:
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = curproc->sz;$/;"	d
sz	proc.h	/^  uint sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc	typeref:typename:uint
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate	typeref:typename:ushort
tags	Makefile	/^tags: $(OBJS) entryother.S _init$/;"	t
tar	Makefile	/^tar:$/;"	t
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:trapframe *
ticks	trap.c	/^uint ticks;$/;"	v	typeref:typename:uint
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v	typeref:typename:uchar[256]
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f	typeref:typename:void
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe	typeref:typename:uint
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f	typeref:typename:void
type	elf.h	/^  uint type;$/;"	m	struct:proghdr	typeref:typename:uint
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr	typeref:typename:ushort
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anonfd762ebb0103
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode	typeref:typename:short
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode	typeref:typename:short
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{IG32,TG32})$/;"	m	struct:gatedesc	typeref:typename:uint:4
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc	typeref:typename:uint:4
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc	typeref:typename:uchar
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic	typeref:typename:uchar
type	sh.c	/^  int type;$/;"	m	struct:backcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	typeref:typename:int	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	typeref:typename:int	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat	typeref:typename:short
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	typeref:typename:int	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	typeref:typename:int	file:
uartinit	uart.c	/^uartinit(void)$/;"	f	typeref:typename:void
uartintr	uart.c	/^uartintr(void)$/;"	f	typeref:typename:void
uartputc	uart.c	/^uartputc(int c)$/;"	f	typeref:typename:void
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t	typeref:typename:unsigned char
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t	typeref:typename:unsigned int
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uio	usertests.c	/^uio()$/;"	f	typeref:typename:void
uninit	usertests.c	/^char uninit[10000];$/;"	v	typeref:typename:char[10000]
unlinkread	usertests.c	/^unlinkread(void)$/;"	f	typeref:typename:void
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon69d64d0c0108	typeref:typename:int	file:
userinit	proc.c	/^userinit(void)$/;"	f	typeref:typename:void
ushort	types.h	/^typedef unsigned short ushort;$/;"	t	typeref:typename:unsigned short
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f	typeref:typename:char *
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr	typeref:typename:uint
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode	typeref:typename:int
validateint	usertests.c	/^validateint(int *p)$/;"	f	typeref:typename:void
validatetest	usertests.c	/^validatetest(void)$/;"	f	typeref:typename:void
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
vectors.S	Makefile	/^vectors.S: vectors.pl$/;"	t
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr	typeref:typename:uint
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf	typeref:typename:uchar
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc	typeref:typename:uchar
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	typeref:typename:void *	file:
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon96a473a90208	typeref:typename:uint	file:
wait	proc.c	/^wait(void)$/;"	f	typeref:typename:int
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f	typeref:typename:void
wakeup	proc.c	/^wakeup(void *chan)$/;"	f	typeref:typename:void
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	typeref:typename:void	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	typeref:typename:pte_t *	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f	typeref:typename:void
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v	typeref:typename:char[]
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f	typeref:typename:void
writable	file.h	/^  char writable;$/;"	m	struct:file	typeref:typename:char
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw	typeref:typename:int (*)(struct inode *,char *,int)
write_head	log.c	/^write_head(void)$/;"	f	typeref:typename:void	file:
write_log	log.c	/^write_log(void)$/;"	f	typeref:typename:void	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f	typeref:typename:int
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	typeref:typename:int	file:
writetest	usertests.c	/^writetest(void)$/;"	f	typeref:typename:void
writetest1	usertests.c	/^writetest1(void)$/;"	f	typeref:typename:void
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f	typeref:typename:void
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	typeref:typename:Align	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf	typeref:typename:uchar
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f	typeref:typename:uint
xint	mkfs.c	/^xint(uint x)$/;"	f	typeref:typename:uint
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf	typeref:typename:ushort
xshort	mkfs.c	/^xshort(ushort x)$/;"	f	typeref:typename:ushort
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
xv6.img	Makefile	/^xv6.img: bootblock kernel$/;"	t
xv6.pdf	Makefile	/^xv6.pdf: $(PRINT)$/;"	t
xv6memfs.img	Makefile	/^xv6memfs.img: bootblock kernelmemfs$/;"	t
year	date.h	/^  uint year;$/;"	m	struct:rtcdate	typeref:typename:uint
yield	proc.c	/^yield(void)$/;"	f	typeref:typename:void
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v	typeref:typename:char[]
